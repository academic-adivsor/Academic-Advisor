{"version":3,"sources":["adminCtrl.js"],"names":["AsyncHandler","require","bcrypt","generateToken","hashPassword","isPassMatched","exports","registerAdmnCtrl","req","res","_req$body","name","email","password","user","regeneratorRuntime","async","_context","prev","next","body","verifyToken","awrap","Admin","findOne","sent","Error","t0","t1","t2","t3","t4","t5","t6","create","call","status","json","data","message","stop","loginAdminCtrl","_req$body2","_context2","abrupt","_id","getAdminsCtrl","admins","_context3","admin","_context4","findById","userAuth","select","updateAdminCtrl","_req$body3","_admin","_context5","t7","new","runValidators","t8","findByIdAndUpdate","isMatched","deleteAdminCtrl","error","adminSuspendTeacherCtrl","adminUnSuspendTeacherCtrl","getAdminProfileCtrl","adminWithdrawTeacherCtrl","adminUnWithdrawTeacherCtrl","adminPublishResultsCtrl","emailExist","adminUnPublishResultsCtrl"],"mappings":"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","file":"adminCtrl.min.js","sourcesContent":["const AsyncHandler = require(\"express-async-handler\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst Admin = require(\"../../model/staff/Admin\");\r\nconst generateToken = require(\"../../utlis/generateToken\");\r\nconst verifyToken = require(\"../../utlis/verifyToken\");\r\nconst {hashPassword, isPassMatched}=require(\"../../utlis/helpers\");\r\n//desc register admin\r\n//router POST /api/admin/register\r\n//@aces Private\r\nexports.registerAdmnCtrl = AsyncHandler(async(req, res) => {\r\n    const { name, email, password } = req.body;\r\n    //check if email exists\r\n    const adminFound = await Admin.findOne({ email });\r\n    if (adminFound) {\r\n        throw new Error(\"Admin Exists\");\r\n    }\r\n    \r\n    //register\r\n    const user = await Admin.create({\r\n        name,\r\n        email,\r\n        password: await hashPassword(password),\r\n    });\r\n    res.status(201).json({\r\n        status: \"success\",\r\n        data: user,\r\n        message: \"Admin registered successfully\",\r\n    });\r\n});\r\n//@desc login admin\r\n//@route POST /api/v1/admins/login\r\n//@access Private\r\nexports.loginAdminCtrl = AsyncHandler(async(req, res) => {\r\n    const { email, password } = req.body;\r\n    //find user\r\n    const user = await Admin.findOne({ email });\r\n    if (!user) {\r\n        return res.json({ message: \"Invalid login crendentials\" });\r\n    }\r\n    const isMatched = await isPassMatched(password, user.password);\r\n    if (!isMatched){\r\n        return res.json({ message: \"Invalid login crendentials\" });\r\n    } else {\r\n        return res.json({\r\n            data: generateToken(user._id),\r\n            message: \"Admin Logged in successfully\",\r\n        });\r\n    }\r\n});\r\n//@desc Get all admin\r\n//@route GET /api/v1/admins\r\n//@access Private\r\nexports.getAdminsCtrl = AsyncHandler(async(req, res) => {\r\n    const admins = await Admin.findOne();\r\n    res.status(200).json({\r\n        status: \"success\",\r\n        message: \"Admins Fetched successfully\",\r\n        data: admins,\r\n    });\r\n});\r\n//@desc Get single admin\r\n//@route GET /api/v1/admins/:id\r\n//@access Private\r\nexports.getAdminProfileCtrl = AsyncHandler(async(req, res) => {\r\n    const admin = await Admin.findById(req.userAuth._id).select(\"-password -createdAt -updatedAt\");\r\n    if (!admin) {\r\n        throw new Error(\"Admin not found\");\r\n    } else {\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data: admin,\r\n            message: \"Admin Profile Fetched successfully\",\r\n        });\r\n    }\r\n});\r\n//@desc update admin\r\n//@route UPDATE /api/v1/admins/:id\r\n//@access Private\r\nexports.updateAdminCtrl = AsyncHandler(async (req, res) => {\r\n    const { email, name, password } = req.body;\r\n    //if email is taken\r\n    const emailExist = await Admin.findOne({ email });\r\n    if (emailExist) {\r\n      throw new Error(\"This email is taken/exist\");\r\n    }\r\n  \r\n    //hash password\r\n    //check if user is updating password\r\n  \r\n    if (password) {\r\n      //update\r\n      const admin = await Admin.findByIdAndUpdate(\r\n        req.userAuth._id,\r\n        {\r\n          email,\r\n          password: await hashPassword(password),\r\n          name,\r\n        },\r\n        {\r\n          new: true,\r\n          runValidators: true,\r\n        }\r\n      );\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: admin,\r\n        message: \"Admin updated successfully\",\r\n      });\r\n    } else {\r\n      //update\r\n      const admin = await Admin.findByIdAndUpdate(\r\n        req.userAuth._id,\r\n        {\r\n          email,\r\n          name,\r\n        },\r\n        {\r\n          new: true,\r\n          runValidators: true,\r\n        }\r\n      );\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: admin,\r\n        message: \"Admin updated successfully\",\r\n      });\r\n    }\r\n  });\r\n//@desc delete admin\r\n//@route DELETE /api/v1/admins/:id\r\n//@access Private\r\nexports.deleteAdminCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"delete admin\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin suspend a teacher\r\n//@route PUT /api/v1/admins/suspend/teacher:id\r\n//@access Private\r\nexports.adminSuspendTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin suspend teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin unsuspend a teacher\r\n//@route PUT /api/v1/admins/unsuspend/teacher:id\r\n//@access Private\r\nexports.adminUnSuspendTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin unsuspend teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin withdraws a teacher\r\n//@route PUT /api/v1/admins/withdraws/teacher:id\r\n//@access Private\r\nexports.adminWithdrawTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin withdraw teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin unwithdraws a teacher\r\n//@route PUT /api/v1/admins/unwithdraws/teacher:id\r\n//@access Private\r\nexports.adminUnWithdrawTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin unwithdraw teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin publish exam results\r\n//@route PUT /api/v1/admins/publish/exam:id\r\n//@access Private\r\nexports.adminPublishResultsCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin publish exam results\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin unpublish exam results\r\n//@route PUT /api/v1/admins/unpublish/exam:id\r\n//@access Private\r\nexports.adminUnPublishResultsCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin unpublish exam results\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};"]}