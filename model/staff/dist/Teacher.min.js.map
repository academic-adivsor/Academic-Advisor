{"version":3,"sources":["Teacher.js"],"names":["mongoose","require","Schema","teacherSchema","type","String","required","email","password","dateEmployed","Date","default","now","teacherId","name","floor","Math","random","toUpperCase","slice","this","split","map","join","Boolean","isSuspended","subjects","ref","applicationStatus","Types","ObjectId","enum","classLevel","academicYear","createdBy","examsCreated","academicTerm","timestamps","Teacher","exports","model","module"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YAAnBD,OAAWC,SAAXD,OAEEE,cAAAA,IAAAA,OAEyB,CAA3BC,KAAAA,CACIC,KAAAC,OACEC,UADF,GADuBC,MAAA,CAKxBH,KAAEC,OACCC,UADD,GALsBE,SAAA,CAS7BA,KAAUH,OACFC,UADE,GATmBG,aAAA,CAa7BA,KAAYC,KACJC,QADMD,KAAAE,KAbeC,UAAA,CAiB7BA,KAAWR,OACHC,UADG,EAEPA,QAAU,WACV,MAEQ,MAKaQ,KAAIC,MAAR,IAAA,IAAAC,KAAAC,UAFTP,KAICQ,MAAAA,WARLC,MAAA,EAAA,GAUHC,KAAAN,KA/BwBO,MAAA,KAiC7BC,IAAA,SAAAR,GAAA,OAAAA,EAAA,KACYS,KAAA,IAAAL,gBAMRd,WAAMoB,CACNpB,KAAAoB,QAzCyBb,SAAA,GA6CzBc,YAAS,CA7CgBrB,KAAAoB,QA+C7BE,SAAW,GAEPC,KAAK,CAjDoBvB,KAAAC,OAmD7BuB,QAAAA,WAEIF,SAAO,CAAA,CACPtB,KAAAJ,SAASE,OAAA2B,MAAAC,SAtDgBH,IAAA,YA0DzBvB,kBAAMC,CA1DmBD,KAAAC,OA4D7B0B,KAAA,CAAA,UAAA,WAAA,YACAC,QAAY,WAGZC,QAAAA,CACQ7B,KAAEC,QAGND,WAAMJ,CACHI,KAAEC,QAET6B,aAAW,CACH9B,KAAEJ,QALVmC,aAAc,CAAC,CAnEc/B,KAAAJ,SAAAE,OAAA2B,MAAAC,SA4E7BM,IAAAA,SAAcF,UAAA,CAGf9B,KAAAJ,SAAAE,OAAA2B,MAAAC,SACCO,IAAU,SAIRC,aAAUtC,CAETuC,KAAPlC,SAPG,CACCgC,YAAY,IAIVC,QAAUtC,SAASwC,MAAM,UAAWrC,eAE1CsC,OAAOF,QAAUD","file":"Teacher.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\n\nconst { Schema } = mongoose;\n\nconst teacherSchema = new Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    dateEmployed: {\n        type: Date,\n        default: Date.now,\n    },\n    teacherId: {\n        type: String,\n        required: true,\n        default: function() {\n            return (\n                \"TEA\" +\n                Math.floor(100 + Math.random() * 900) +\n                Date.now().toString().slice(2, 4) +\n                this.name\n                .split(\" \")\n                .map(name => name[0])\n                .join(\"\")\n                .toUpperCase()\n            );\n        },\n    },\n    //if witdrawn, the teacher will not be able to login\n    isWitdrawn: {\n        type: Boolean,\n        default: false,\n    },\n    //if suspended, the teacher can login but cannot perform any task\n    isSuspended: {\n        type: Boolean,\n        default: false,\n    },\n    role: {\n        type: String,\n        default: \"teacher\",\n    },\n    subjects: [{\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Subject\",\n    }, ],\n    applicationStatus: {\n        type: String,\n        enum: [\"pending\", \"approved\", \"rejected\"],\n        default: \"pending\",\n    },\n\n    program: {\n        type: String,\n    },\n    //A teacher can teach in more than one class level\n    classLevel: {\n        type: String,\n    },\n    academicYear: {\n        type: String,\n    },\n    examsCreated: [{\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Exam\",\n    }, ],\n    createdBy: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Admin\",\n        // required: true,\n    },\n    academicTerm: {\n        type: String,\n    },\n}, {\n    timestamps: true,\n});\n\n// model\nconst Teacher = mongoose.model(\"Teacher\", teacherSchema);\n\nmodule.exports = Teacher;"]}