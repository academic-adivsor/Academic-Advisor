{"version":3,"sources":["Admin.js"],"names":["bcrypt","require","mongoose","Schema","name","String","required","type","email","password","role","adminSchema","pre","next","salt","regeneratorRuntime","async","_context","prev","timestamps","isModified","awrap","genSalt","sent","hash","this","stop","verifyPassword","enteredPassword","_context2","compare","abrupt","Admin","model","module","exports"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,YACjBC,SAAWD,QAAQ,YADnBD,YAAgB,IAACE,SAAvBC,OAAA,CAGIC,KAAM,CAFJF,KAAQG,OAINC,UAAU,GAFdF,MAAM,CACEG,KAAEF,OACNC,UAAU,GAEdE,SAAO,CACCD,KAAEF,OACNC,UAAU,GAEdG,KAAQ,CACAF,KAAEF,OACNC,QAAU,UAEdI,CACIH,YADE,IAb8BI,YAiBrCC,IAAA,OAAA,SAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAJ,MAAA,KAAA,EAAA,OACCM,KAAYC,WAAA,aAEhBP,IAHGI,EAAAJ,KAAA,EAAAE,mBAAAM,MAIqBrB,OAAAsB,QAAA,KAJrB,KAAA,EAAA,OAIqBR,EAJrBG,EAAAM,KAAAN,EAAAJ,KAAA,EAAAE,mBAAAM,MAIqBrB,OAAAwB,KAAAC,KAAAhB,SAAAK,IAJrB,KAAA,EAIqBW,KAAAhB,SAJrBQ,EAAAM,KAIqBV,IAJrB,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAS,SAAA,KAAAD,QAMKZ,YAAAA,QAAIc,eAAA,SAAAC,GAAA,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAhB,KAAA,EAAAE,mBAAAM,MAERrB,OAAA8B,QAAAF,EAAAH,KAAAhB,WAFQ,KAAA,EAAA,OAAAoB,EAAAE,OAAA,SAAAF,EAAAN,MAAA,KAAA,EAAA,IAAA,MAAA,OAAAM,EAAAH,SAAA,KAAAD,OAFY,IAAAO,MAAA9B,SAAA+B,MAAA,QAAAtB,aAiBxBuB,OAAOC,QAAUH","file":"Admin.min.js","sourcesContent":["const bcrypt = require(\"bcryptjs\");\nconst mongoose = require(\"mongoose\");\nconst adminSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        default: \"admin\",\n    },\n}, {\n    timestamps: true,\n});\n//Hash password\nadminSchema.pre(\"save\", async function(next) {\n    if (!this.isModified(\"password\")) {\n        next();\n    }\n    //salt\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n});\n\n//verifyPassword\nadminSchema.methods.verifyPassword = async function(enteredPassword) {\n    return await bcrypt.compare(enteredPassword, this.password);\n};\n//model\nconst Admin = mongoose.model(\"Admin\", adminSchema);\n\nmodule.exports = Admin;"]}