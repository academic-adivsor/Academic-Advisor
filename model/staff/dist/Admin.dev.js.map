{"version":3,"sources":["Admin.js"],"names":["bcrypt","require","mongoose","adminSchema","Schema","name","type","String","required","email","password","role","timestamps","pre","next","isModified","genSalt","salt","hash","methods","verifyPassword","enteredPassword","compare","Admin","model","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,WAAW,GAAG,IAAID,QAAQ,CAACE,MAAb,CAAoB;AACpCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAE;AAFR,GAD8B;AAKpCC,EAAAA,KAAK,EAAE;AACHH,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE;AAFP,GAL6B;AASpCE,EAAAA,QAAQ,EAAE;AACNJ,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GAT0B;AAapCG,EAAAA,IAAI,EAAE;AACFL,IAAAA,IAAI,EAAEC,MADJ;AAEF,eAAS;AAFP;AAb8B,CAApB,EAiBjB;AACCK,EAAAA,UAAU,EAAE;AADb,CAjBiB,CAApB,C,CAoBA;;AACAT,WAAW,CAACU,GAAZ,CAAgB,MAAhB,EAAwB,iBAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB,cAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAC9BD,YAAAA,IAAI;AACP,WAHmB,CAIpB;;;AAJoB;AAAA,0CAKDd,MAAM,CAACgB,OAAP,CAAe,EAAf,CALC;;AAAA;AAKdC,UAAAA,IALc;AAAA;AAAA,0CAMEjB,MAAM,CAACkB,IAAP,CAAY,KAAKR,QAAjB,EAA2BO,IAA3B,CANF;;AAAA;AAMpB,eAAKP,QANe;AAOpBI,UAAAA,IAAI;;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,E,CAUA;;AACAX,WAAW,CAACgB,OAAZ,CAAoBC,cAApB,GAAqC,kBAAeC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACpBrB,MAAM,CAACsB,OAAP,CAAeD,eAAf,EAAgC,KAAKX,QAArC,CADoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArC,C,CAGA;;;AACA,IAAMa,KAAK,GAAGrB,QAAQ,CAACsB,KAAT,CAAe,OAAf,EAAwBrB,WAAxB,CAAd;AAEAsB,MAAM,CAACC,OAAP,GAAiBH,KAAjB","sourcesContent":["const bcrypt = require(\"bcryptjs\");\nconst mongoose = require(\"mongoose\");\nconst adminSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        default: \"admin\",\n    },\n}, {\n    timestamps: true,\n});\n//Hash password\nadminSchema.pre(\"save\", async function(next) {\n    if (!this.isModified(\"password\")) {\n        next();\n    }\n    //salt\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n});\n\n//verifyPassword\nadminSchema.methods.verifyPassword = async function(enteredPassword) {\n    return await bcrypt.compare(enteredPassword, this.password);\n};\n//model\nconst Admin = mongoose.model(\"Admin\", adminSchema);\n\nmodule.exports = Admin;"],"file":"Admin.dev.js"}