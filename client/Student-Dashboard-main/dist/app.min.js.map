{"version":3,"sources":["app.js"],"names":["sideMenu","document","querySelector","profileBtn","getElementById","themeToggler","onclick","classList","toggle","remove","window","scrollY","add","onscroll","setData","day","innerHTML","Sunday","Monday","Thursday","daylist","Friday","forEach","sub","createElement","trContent","concat","time","roomNumber","subject","type","tr","Tuesday","appendChild","Wednesday","today","now","getDay","timeTableAll","nextDay","prevDay","userMessage","chatInput","sendChatBtn","Date","chatbotCloseBtn","API_KEY","message","className","chatLi","chatContent","textContent","generateResponse","requestOptions","response","_ref","botResponse","regeneratorRuntime","async","_context","prev","next","headers","Content-Type","body","JSON","stringify","awrap","sent","json","console","error","t0","chatbox","scrollHeight","finish","stop","handleChat","incomingChatLi","_context2","value","abrupt","createChatLi","scrollTo","method","addEventListener","chatbotToggler"],"mappings":"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","file":"app.min.js","sourcesContent":["const sideMenu = document.querySelector(\"aside\");\r\nconst profileBtn = document.querySelector(\"#profile-btn\");\r\nconst themeToggler = document.querySelector(\".theme-toggler\");\r\nconst nextDay = document.getElementById('nextDay');\r\nconst prevDay = document.getElementById('prevDay');\r\n\r\nprofileBtn.onclick = function() {\r\n    sideMenu.classList.toggle('active');\r\n}\r\nwindow.onscroll = () => {\r\n    sideMenu.classList.remove('active');\r\n    if(window.scrollY > 0){document.querySelector('header').classList.add('active');}\r\n    else{document.querySelector('header').classList.remove('active');}\r\n}\r\n\r\nthemeToggler.onclick = function() {\r\n    document.body.classList.toggle('dark-theme');\r\n    themeToggler.querySelector('span:nth-child(1)').classList.toggle('active')\r\n    themeToggler.querySelector('span:nth-child(2)').classList.toggle('active')\r\n}\r\n\r\nlet setData = (day) =>{\r\n    document.querySelector('table tbody').innerHTML = ' '; //To clear out previous table data;  \r\n    let daylist = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n    document.querySelector('.timetable div h2').innerHTML = daylist[day];\r\n    switch(day){\r\n        case(0): day = Sunday; break;\r\n        case(1): day = Monday; break;\r\n        case(2): day = Tuesday; break;\r\n        case(3): day = Wednesday; break;\r\n        case(4): day = Thursday; break;\r\n        case(5): day = Friday; break;\r\n        case(6): day = Saturday; break;\r\n    }\r\n\r\n    day.forEach(sub => {\r\n        const tr = document.createElement('tr');\r\n        const trContent = `\r\n                            <td>${sub.time}</td>\r\n                            <td>${sub.roomNumber}</td>\r\n                            <td>${sub.subject}</td>\r\n                            <td>${sub.type}</td>\r\n                        `\r\n        tr.innerHTML = trContent;\r\n        document.querySelector('table tbody').appendChild(tr)                        \r\n    });\r\n}\r\n\r\nlet now = new Date();\r\nlet today = now.getDay(); // Will return the present day in numerical value; \r\nlet day = today; //To prevent the today value from changing;\r\n\r\nfunction timeTableAll(){\r\n    document.getElementById('timetable').classList.toggle('active');\r\n    setData(today);\r\n    document.querySelector('.timetable div h2').innerHTML = \"Today's Timetable\";\r\n}\r\nnextDay.onclick = function() {\r\n    day<=5 ? day++ : day=0;  // If else one liner\r\n    setData(day);\r\n}\r\nprevDay.onclick = function() {\r\n    day>=1 ? day-- : day=6;    \r\n    setData(day);\r\n}\r\n\r\nsetData(day); //To set the data in the table on loading window.\r\ndocument.querySelector('.timetable div h2').innerHTML = \"Today's Timetable\"; //To prevent overwriting the heading on loading;\r\n\r\n// ===============> chat-bot Code Go as Follows <================ //\r\nconst chatInput = document.querySelector(\".chat-input textarea\")\r\nconst sendChatBtn = document.querySelector(\".chat-input span\");\r\nconst chatbox = document.querySelector(\".chatbox\");\r\nconst chatbotToggler = document.querySelector(\".chatbot-toggler\");\r\nconst chatbotCloseBtn = document.querySelector(\".close-btn\");\r\n\r\nlet userMessage;\r\nconst API_KEY = \"sk-7Palc22EziLHISrxbAVQT38lbkFJY9WCOZiqdBhebjUy2XpH\";\r\n\r\nconst createChatLi = (message , className) => {\r\n    const chatLi = document.createElement(\"li\");\r\n    chatLi.classList.add(\"chat\" , className);\r\n    let chatContent = className === \"outgoing\" ? `<P></P>` : `<span class=\"material-symbols-outlined\">smart_toy</span><P></P>`;\r\n    chatLi.innerHTML = chatContent;\r\n    chatLi.querySelector(\"p\").textContent = message;\r\n    return chatLi;\r\n}\r\n\r\nconst generateResponse = async (incomingChatLi) => {\r\n    const API_URL = 'http://localhost:2020/chat';\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message: userMessage }),\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(API_URL, requestOptions);\r\n        if (response.ok) {\r\n            const { botResponse } = await response.json();\r\n            // Update the UI with the chatbot's response\r\n            chatDisplay.innerHTML += `<div>User: ${userMessage}</div>`;\r\n            chatDisplay.innerHTML += `<div>Bot: ${botResponse}</div>`;\r\n        } else {\r\n            console.error('Error communicating with the server');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n    } finally {\r\n        chatbox.scrollTo(0, chatbox.scrollHeight);\r\n    }\r\n};\r\n\r\nconst handleChat = async () => {\r\n    userMessage = chatInput.value.trim();\r\n    if (!userMessage) return;\r\n    chatInput.value = \"\";\r\n\r\n    chatbox.appendChild(createChatLi(userMessage, \"outgoing\"));\r\n    chatbox.scrollTo(0, chatbox.scrollHeight);\r\n\r\n    // Display \"Thinking...\" message while waiting for the response\r\n    const incomingChatLi = createChatLi(\"Thinking...\", \"incoming\");\r\n    chatbox.appendChild(incomingChatLi);\r\n    chatbox.scrollTo(0, chatbox.scrollHeight);\r\n\r\n    // Wait for generateResponse to complete before moving on\r\n    await generateResponse(incomingChatLi);\r\n};\r\n\r\nsendChatBtn.addEventListener(\"click\" , handleChat);\r\nchatbotCloseBtn.addEventListener(\"click\" , () => document.body.classList.remove(\"show-chatbot\"));\r\nchatbotToggler.addEventListener(\"click\" , () => document.body.classList.toggle(\"show-chatbot\"));"]}