{"version":3,"sources":["subjects.js"],"names":["AysncHandler","require","Program","Admin","exports","createSubject","req","res","_req$body","name","description","academicTerm","programFound","subjectCreated","regeneratorRuntime","async","_context","prev","next","body","awrap","findById","params","programID","sent","Error","Subject","findOne","create","_id","save","status","json","message","data","stop","getSubjects","classes","_context2","subjectFound","find","id","createdBy","program","_req$body2","subject","_context4","findByIdAndUpdate","userAuth","new","deleteSubject","_context5","findByIdAndDelete"],"mappings":"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","file":"subjects.min.js","sourcesContent":["const AysncHandler = require(\"express-async-handler\");\nconst Program = require(\"../../model/Academic/Program\");\nconst Subject = require(\"../../model/Academic/Subject\");\nconst Admin = require(\"../../model/staff/Admin\");\n\n//@desc  Create subject\n//@route POST /api/v1/subjects/:programID\n//@acess  Private\n\nexports.createSubject = AysncHandler(async (req, res) => {\n  const { name, description, academicTerm } = req.body;\n  //find the program\n  const programFound = await Program.findById(req.params.programID);\n  if (!programFound) {\n    throw new Error(\"Program  not found\");\n  }\n  //check if exists\n  const subjectFound = await Subject.findOne({ name });\n  if (subjectFound) {\n    throw new Error(\"Subject  already exists\");\n  }\n  //create\n  const subjectCreated = await Subject.create({\n    name,\n    description,\n    academicTerm,\n    createdBy: req.userAuth._id,\n  });\n  //push to the program\n  // programFound.subjects.push(subjectCreated._id);\n  //save\n  await programFound.save();\n  res.status(201).json({\n    status: \"success\",\n    message: \"Program created successfully\",\n    data: subjectCreated,\n  });\n});\n\n//@desc  get all Subjects\n//@route GET /api/v1/subjects\n//@acess  Private\n\nexports.getSubjects = AysncHandler(async (req, res) => {\n  const classes = await Subject.find();\n  res.status(201).json({\n    status: \"success\",\n    message: \"Subjects fetched successfully\",\n    data: classes,\n  });\n});\n\n//@desc  get single subject\n//@route GET /api/v1/subjects/:id\n//@acess  Private\nexports.getProgram = AysncHandler(async (req, res) => {\n  const program = await Subject.findById(req.params.id);\n  res.status(201).json({\n    status: \"success\",\n    message: \"Subject fetched successfully\",\n    data: program,\n  });\n});\n\n//@desc   Update  Subject\n//@route  PUT /api/v1/subjects/:id\n//@acess  Private\n\nexports.updatSubject = AysncHandler(async (req, res) => {\n  const { name, description, academicTerm } = req.body;\n  //check name exists\n  const subjectFound = await Subject.findOne({ name });\n  if (subjectFound) {\n    throw new Error(\"Program already exists\");\n  }\n  const subject = await Subject.findByIdAndUpdate(\n    req.params.id,\n    {\n      name,\n      description,\n      academicTerm,\n      createdBy: req.userAuth._id,\n    },\n    {\n      new: true,\n    }\n  );\n\n  res.status(201).json({\n    status: \"success\",\n    message: \"subject  updated successfully\",\n    data: subject,\n  });\n});\n\n//@desc   Delete  Subject\n//@route  PUT /api/v1/subjects/:id\n//@acess  Private\nexports.deleteSubject = AysncHandler(async (req, res) => {\n  await Subject.findByIdAndDelete(req.params.id);\n  res.status(201).json({\n    status: \"success\",\n    message: \"subject deleted successfully\",\n  });\n});\n"]}