{"version":3,"sources":["academicTermCtrl.js"],"names":["AysncHandler","require","AcademicTerm","exports","createAcademicTerm","req","res","_req$body","name","description","duration","academicTermCreated","admin","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","Error","create","createdBy","userAuth","_id","academicTerms","push","save","status","json","academicTerm","message","data","stop","getAcademicTerms","_context2","find","getAcademicTerm","_context3","findById","params","id","updateAcademicTerms","_req$body2","_context4","findByIdAndUpdate","new","deleteAcademicTerm","_context5","findByIdAndDelete"],"mappings":"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","file":"academicTermCtrl.min.js","sourcesContent":["const AysncHandler = require(\"express-async-handler\");\nconst AcademicTerm = require(\"../../model/Academic/AcademicTerm\");\nconst Admin = require(\"../../model/staff/Admin\");\n\n//@desc Create Academic Term Year\n//@route POST /api/v1/academic-terms\n//@acess  Private\nexports.createAcademicTerm = AysncHandler(async (req, res) => {\n  const { name, description, duration } = req.body;\n  //check if exists\n  const academicTerm = await AcademicTerm.findOne({ name });\n  if (academicTerm) {\n    throw new Error(\"Academic term already exists\");\n  }\n  //create\n  const academicTermCreated = await AcademicTerm.create({\n    name,\n    description,\n    duration,\n    createdBy: req.userAuth._id,\n  });\n  //push academic into admin\n  const admin = await Admin.findById(req.userAuth._id);\n  admin.academicTerms.push(academicTermCreated._id);\n  await admin.save();\n  res.status(201).json({\n    status: \"success\",\n    message: \"Academic term created successfully\",\n    data: academicTermCreated,\n  });\n});\n\n//@desc  get all Academic terms\n//@route GET /api/v1/academic-terms\n//@acess  Private\nexports.getAcademicTerms = AysncHandler(async (req, res) => {\n  const academicTerms = await AcademicTerm.find();\n\n  res.status(201).json({\n    status: \"success\",\n    message: \"Academic terms fetched successfully\",\n    data: academicTerms,\n  });\n});\n\n//@desc  get single Academic term\n//@route GET /api/v1/academic-terms/:id\n//@acess  Private\nexports.getAcademicTerm = AysncHandler(async (req, res) => {\n  const academicTerms = await AcademicTerm.findById(req.params.id);\n\n  res.status(201).json({\n    status: \"success\",\n    message: \"Academic terms fetched successfully\",\n    data: academicTerms,\n  });\n});\n\n//@desc   Update  Academic term\n//@route  PUT /api/v1/academic-terms/:id\n//@acess  Private\nexports.updateAcademicTerms = AysncHandler(async (req, res) => {\n  const { name, description, duration } = req.body;\n  //check name exists\n  const createAcademicTermFound = await AcademicTerm.findOne({ name });\n  if (createAcademicTermFound) {\n    throw new Error(\"Academic terms= already exists\");\n  }\n  const academicTerms = await AcademicTerm.findByIdAndUpdate(\n    req.params.id,\n    {\n      name,\n      description,\n      duration,\n      createdBy: req.userAuth._id,\n    },\n    {\n      new: true,\n    }\n  );\n\n  res.status(201).json({\n    status: \"success\",\n    message: \"Academic term updated successfully\",\n    data: academicTerms,\n  });\n});\n\n//@desc   Delete  Academic term\n//@route  PUT /api/v1/academic-terms/:id\n//@acess  Private\nexports.deleteAcademicTerm = AysncHandler(async (req, res) => {\n  await AcademicTerm.findByIdAndDelete(req.params.id);\n\n  res.status(201).json({\n    status: \"success\",\n    message: \"Academic term deleted successfully\",\n  });\n});\n"]}