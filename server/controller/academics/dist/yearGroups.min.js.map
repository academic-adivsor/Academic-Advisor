{"version":3,"sources":["yearGroups.js"],"names":["AysncHandler","require","Program","YearGroup","exports","Admin","req","res","_req$body","name","academicYear","yearGroup","admin","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","Error","create","createdBy","userAuth","yearGroups","push","_id","save","status","json","message","data","stop","getYearGroups","groups","_context2","find","getYearGroup","group","_context3","findById","params","id","_req$body2","_context4","findByIdAndUpdate","findByIdAndDelete"],"mappings":"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","file":"yearGroups.min.js","sourcesContent":["const AysncHandler = require(\"express-async-handler\");\nconst Program = require(\"../../model/Academic/Program\");\nconst Subject = require(\"../../model/Academic/Subject\");\nconst YearGroup = require(\"../../model/Academic/YearGroup\");\nconst Admin = require(\"../../model/staff/Admin\");\n\n//@desc  Create year group\n//@route POST /api/v1/year-groups\n//@acess  Private\n\nexports.createYearGroup = AysncHandler(async (req, res) => {\n  const { name, academicYear } = req.body;\n\n  //check if exists\n  const yeargroup = await YearGroup.findOne({ name });\n  if (yeargroup) {\n    throw new Error(\"Year Group/Graduation   already exists\");\n  }\n  //create\n  const yearGroup = await YearGroup.create({\n    name,\n    academicYear,\n    createdBy: req.userAuth._id,\n  });\n  //push to the program\n  //find the admin\n  const admin = await Admin.findById(req.userAuth._id);\n  if (!admin) {\n    throw new Error(\"Admin not found\");\n  }\n  //push year froup into admin\n  admin.yearGroups.push(yearGroup._id);\n  //save\n  await admin.save();\n  res.status(201).json({\n    status: \"success\",\n    message: \"Year Group created successfully\",\n    data: yearGroup,\n  });\n});\n\n//@desc  get all Year grups\n//@route GET /api/v1/year-groups\n//@acess  Private\n\nexports.getYearGroups = AysncHandler(async (req, res) => {\n  const groups = await YearGroup.find();\n  res.status(201).json({\n    status: \"success\",\n    message: \"Year Groups fetched successfully\",\n    data: groups,\n  });\n});\n\n//@desc  get single year group\n//@route GET /api/v1/year-group/:id\n//@acess  Private\n\nexports.getYearGroup = AysncHandler(async (req, res) => {\n  const group = await YearGroup.findById(req.params.id);\n  res.status(201).json({\n    status: \"success\",\n    message: \"Year Group fetched successfully\",\n    data: group,\n  });\n});\n\n//@desc   Update  Year Group\n//@route  PUT /api/v1/year-groups/:id\n//@acess  Private\n\nexports.updateYearGroup = AysncHandler(async (req, res) => {\n  const { name, academicYear } = req.body;\n  //check name exists\n  const yearGroupFound = await YearGroup.findOne({ name });\n  if (yearGroupFound) {\n    throw new Error(\"year Group already exists\");\n  }\n  const yearGroup = await YearGroup.findByIdAndUpdate(\n    req.params.id,\n    {\n      name,\n      academicYear,\n      createdBy: req.userAuth._id,\n    },\n    {\n      new: true,\n    }\n  );\n\n  res.status(201).json({\n    status: \"success\",\n    message: \"Year Group  updated successfully\",\n    data: yearGroup,\n  });\n});\n\n//@desc   Delete  Year group\n//@route  PUT /api/v1/year-groups/:id\n//@acess  Private\nexports.deleteYearGroup = AysncHandler(async (req, res) => {\n  await YearGroup.findByIdAndDelete(req.params.id);\n  res.status(201).json({\n    status: \"success\",\n    message: \"Year Group deleted successfully\",\n  });\n});\n"]}