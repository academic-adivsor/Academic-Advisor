{"version":3,"sources":["auth.js"],"names":["_user","_interopRequireDefault","require","_auth","_jsonwebtoken","register","req","res","_req$body","name","email","password","hashedPassword","user","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","send","length","awrap","exec","sent","hashPassword","User","save","json","ok","t0","console","log","stop"],"mappings":"4FAAA,IAAAA,MAAAC,uBAAAC,QAAA,mBACAC,MAAAD,QAAA,iBACAE,cAAAH,uBAAAC,QAAA,yFAEO,IAAMG,SAAW,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAAAT,EAJxBF,EAAAa,KAAAV,EAIwBD,EAJxBC,KAAAC,EAIwBF,EAJxBE,MAAAC,EAIwBH,EAJxBG,SACAF,EAGwB,CAAAO,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAHxBb,EAAAc,OAAA,KAAAC,KAAA,qBAGwB,KAAA,EAAA,IAMfX,GAAYA,EAASY,OAAS,EANf,OAAAP,EAAAI,OAAA,SAFxBb,EAUSc,OAAO,KACPC,KAAK,6DATUN,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAU,MAAXnB,MAAAA,QAAAA,QAAuBE,CAAZG,MAAAA,IAAAe,QAAA,KAAA,EAAA,GAAAT,EAAAU,KAAA,OAAAV,EAAAI,OAAA,SAAAb,EAAAc,OAAA,KAAAC,KAAA,mBAAAN,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAU,OAAA,EAAArB,MAAAwB,cAAAhB,IAAA,KAAA,GAAA,OAAAC,EAAAI,EAAAU,KAAAb,EAAA,IAAAe,MAAAA,QAAA,CAEpBnB,KAAAA,EAFoBC,MAAAA,EAqBlBC,SAAUC,IArBQI,EAAAE,KAAA,GAAAJ,mBAAAU,MAAAX,EAAAgB,QAAA,KAAA,GAAA,OAAAb,EAAAI,OAAA,SAAAb,EAAAuB,KAAA,CAAAC,IAAA,KAAA,KAAA,GAAA,OAAAf,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,MAAA,GAAAiB,QAAAC,IAAAlB,EAAAgB,IAAAhB,EAAAI,OAAA,SA4Bbb,EAAIc,OAAO,KAAKC,KAAK,sBA5BR,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"auth.min.js","sourcesContent":["import User from \"../models/user\";\nimport { hashPassword, comparePassword } from \"../utils/auth\";\nimport jwt from \"jsonwebtoken\";\n\nexport const register = async (req, res) => {\n  try {\n    // console.log(req.body);\n    const { name, email, password } = req.body;\n    // validation\n    if (!name) return res.status(400).send(\"Name is required\");\n    if (!password || password.length < 6) {\n      return res\n        .status(400)\n        .send(\"Password is required and should be min 6 characters long\");\n    }\n    let userExist = await User.findOne({ email }).exec();\n    if (userExist) return res.status(400).send(\"Email is taken\");\n\n    // hash password\n    const hashedPassword = await hashPassword(password);\n\n    // register\n    const user = new User({\n      name,\n      email,\n      password: hashedPassword,\n    });\n    await user.save();\n    // console.log(\"saved user\", user);\n    return res.json({ ok: true });\n  } catch (err) {\n    console.log(err);\n    return res.status(400).send(\"Error. Try again.\");\n  }\n};\n\n"]}