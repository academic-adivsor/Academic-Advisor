{"version":3,"sources":["auth.js"],"names":["User","require","hashPassword","comparePassword","exports","_req$body","email","password","user","token","regeneratorRuntime","async","_context","prev","next","req","body","awrap","findOne","exec","logincontroller","sent","abrupt","res","status","send","jwt","sign","_id","process","env","JWT_SECRET","expiresIn","undefined","cookie","httpOnly","json","t0","console","log","stop"],"mappings":"aAAA,IAAMA,KAAMC,QAAQ,0BACqBA,QAAQ,oBAAzCC,sBAAAA,aAAcC,yBAAAA,gBADhBH,IAAMC,QAAQ,gBAKpBG,QAJQF,gBAIkB,SAJlBA,EAAAA,GAIkB,IAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAR,EAHRU,EAAlBC,KAAWf,EAGeI,EAHfJ,MAAQM,EAGOF,EAHPE,SAGOK,EAAAE,KAAA,EAAAJ,mBAAAO,MAA1BjB,KAA0BkB,QAAA,CAAAZ,MAAAA,IAAAa,QAAA,KAAA,EAAA,GAAlBC,EAAkBR,EAAAS,KAAA,CAAAT,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAU,OAAA,SAAAC,EAAAC,OAAA,KAAAC,KAAA,kBAAA,KAAA,EAAA,OAAAb,EAAAE,KAAA,EAAAJ,mBAAAO,MAAAd,gBAAAI,EAAAC,EAAAD,WAAA,KAAA,EAAAK,EAAAS,KAAAZ,EAAAiB,IAAAC,KAAA,CAAAC,IAAApB,EAAAoB,KAAAC,QAAAC,IAAAC,WAAA,CAAAC,UAAA,OAAAxB,EAAAD,cAAA0B,EAAAV,EAAAW,OAAA,QAAAzB,EAAA,CAAA0B,UAAA,IAAAZ,EAAAa,KAAA5B,GAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAyB,GAAAzB,EAAA,MAAA,GAuBtB0B,QAAQC,IAAR3B,EAAAyB,IAvBsBzB,EAAAU,OAAA,SAAAC,EAMjBf,OANiB,KAAAiB,KAAA,sBAAA,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAA4B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"auth.min.js","sourcesContent":["const User= require(\"../model/user\");\nconst { hashPassword, comparePassword }= require(\"../utlis/helpers\");\nconst jwt= require(\"jsonwebtoken\");\n\n\nexports.logincontroller = async (req, res) => {\n  try {\n    // console.log(req.body);\n    const { email, password } = req.body;\n    // check if our db has user with that email\n    const user = await User.findOne({ email }).exec();\n    if (!user) return res.status(400).send(\"No user found\");\n    // check password\n    const match = await comparePassword(password, user.password);\n    // create signed jwt\n    const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\",\n    });\n    // return user and token to client, exclude hashed password\n    user.password = undefined;\n    // send token in cookie\n    res.cookie(\"token\", token, {\n      httpOnly: true,\n      // secure: true, // only works on https\n    });\n    // send user as json response\n    res.json(user);\n  } catch (err) {\n    console.log(err);\n    return res.status(400).send(\"Error. Try again.\");\n  }\n};\n"]}