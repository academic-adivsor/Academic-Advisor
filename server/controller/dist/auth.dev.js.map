{"version":3,"sources":["auth.js"],"names":["register","req","res","body","name","email","password","status","send","length","User","findOne","exec","userExist","hashedPassword","user","save","json","ok","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB;AAFoB,sBAGcD,GAAG,CAACE,IAHlB,EAGZC,IAHY,aAGZA,IAHY,EAGNC,KAHM,aAGNA,KAHM,EAGCC,QAHD,aAGCA,QAHD,EAIpB;;AAJoB,cAKfF,IALe;AAAA;AAAA;AAAA;;AAAA,2CAKFF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB,CALE;;AAAA;AAAA,gBAMhB,CAACF,QAAD,IAAaA,QAAQ,CAACG,MAAT,GAAkB,CANf;AAAA;AAAA;AAAA;;AAAA,2CAOXP,GAAG,CACPK,MADI,CACG,GADH,EAEJC,IAFI,CAEC,0DAFD,CAPW;;AAAA;AAAA;AAAA,0CAWEE,iBAAKC,OAAL,CAAa;AAAEN,YAAAA,KAAK,EAALA;AAAF,WAAb,EAAwBO,IAAxB,EAXF;;AAAA;AAWhBC,UAAAA,SAXgB;;AAAA,eAYhBA,SAZgB;AAAA;AAAA;AAAA;;AAAA,2CAYEX,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAZF;;AAAA;AAAA;AAAA,0CAeS,wBAAaF,QAAb,CAfT;;AAAA;AAedQ,UAAAA,cAfc;AAiBpB;AACMC,UAAAA,IAlBc,GAkBP,IAAIL,gBAAJ,CAAS;AACpBN,YAAAA,IAAI,EAAJA,IADoB;AAEpBC,YAAAA,KAAK,EAALA,KAFoB;AAGpBC,YAAAA,QAAQ,EAAEQ;AAHU,WAAT,CAlBO;AAAA;AAAA,0CAuBdC,IAAI,CAACC,IAAL,EAvBc;;AAAA;AAAA,2CAyBbd,GAAG,CAACe,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAAT,CAzBa;;AAAA;AAAA;AAAA;AA2BpBC,UAAAA,OAAO,CAACC,GAAR;AA3BoB,2CA4BblB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CA5Ba;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import User from \"../models/user\";\nimport { hashPassword, comparePassword } from \"../utils/auth\";\nimport jwt from \"jsonwebtoken\";\n\nexport const register = async (req, res) => {\n  try {\n    // console.log(req.body);\n    const { name, email, password } = req.body;\n    // validation\n    if (!name) return res.status(400).send(\"Name is required\");\n    if (!password || password.length < 6) {\n      return res\n        .status(400)\n        .send(\"Password is required and should be min 6 characters long\");\n    }\n    let userExist = await User.findOne({ email }).exec();\n    if (userExist) return res.status(400).send(\"Email is taken\");\n\n    // hash password\n    const hashedPassword = await hashPassword(password);\n\n    // register\n    const user = new User({\n      name,\n      email,\n      password: hashedPassword,\n    });\n    await user.save();\n    // console.log(\"saved user\", user);\n    return res.json({ ok: true });\n  } catch (err) {\n    console.log(err);\n    return res.status(400).send(\"Error. Try again.\");\n  }\n};\n\n"],"file":"auth.dev.js"}