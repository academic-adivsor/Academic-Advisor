{"version":3,"sources":["auth.js"],"names":["User","require","hashPassword","comparePassword","jwt","exports","logincontroller","req","res","body","email","password","findOne","exec","user","status","send","match","token","sign","_id","process","env","JWT_SECRET","expiresIn","undefined","cookie","httpOnly","json","console","log"],"mappings":";;AAAA,IAAMA,IAAI,GAAEC,OAAO,CAAC,eAAD,CAAnB;;eACyCA,OAAO,CAAC,kBAAD,C;IAAxCC,Y,YAAAA,Y;IAAcC,e,YAAAA,e;;AACtB,IAAMC,GAAG,GAAEH,OAAO,CAAC,cAAD,CAAlB;;AAGAI,OAAO,CAACC,eAAR,GAA0B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtB;AAFsB,sBAGMD,GAAG,CAACE,IAHV,EAGdC,KAHc,aAGdA,KAHc,EAGPC,QAHO,aAGPA,QAHO,EAItB;;AAJsB;AAAA,0CAKHX,IAAI,CAACY,OAAL,CAAa;AAAEF,YAAAA,KAAK,EAALA;AAAF,WAAb,EAAwBG,IAAxB,EALG;;AAAA;AAKhBC,UAAAA,IALgB;;AAAA,cAMjBA,IANiB;AAAA;AAAA;AAAA;;AAAA,2CAMJN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB,CANI;;AAAA;AAAA;AAAA,0CAQFb,eAAe,CAACQ,QAAD,EAAWG,IAAI,CAACH,QAAhB,CARb;;AAAA;AAQhBM,UAAAA,KARgB;AAStB;AACMC,UAAAA,KAVgB,GAURd,GAAG,CAACe,IAAJ,CAAS;AAAEC,YAAAA,GAAG,EAAEN,IAAI,CAACM;AAAZ,WAAT,EAA4BC,OAAO,CAACC,GAAR,CAAYC,UAAxC,EAAoD;AAChEC,YAAAA,SAAS,EAAE;AADqD,WAApD,CAVQ,EAatB;;AACAV,UAAAA,IAAI,CAACH,QAAL,GAAgBc,SAAhB,CAdsB,CAetB;;AACAjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,OAAX,EAAoBR,KAApB,EAA2B;AACzBS,YAAAA,QAAQ,EAAE,IADe,CAEzB;;AAFyB,WAA3B,EAhBsB,CAoBtB;;AACAnB,UAAAA,GAAG,CAACoB,IAAJ,CAASd,IAAT;AArBsB;AAAA;;AAAA;AAAA;AAAA;AAuBtBe,UAAAA,OAAO,CAACC,GAAR;AAvBsB,2CAwBftB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CAxBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B","sourcesContent":["const User= require(\"../model/user\");\nconst { hashPassword, comparePassword }= require(\"../utlis/helpers\");\nconst jwt= require(\"jsonwebtoken\");\n\n\nexports.logincontroller = async (req, res) => {\n  try {\n    // console.log(req.body);\n    const { email, password } = req.body;\n    // check if our db has user with that email\n    const user = await User.findOne({ email }).exec();\n    if (!user) return res.status(400).send(\"No user found\");\n    // check password\n    const match = await comparePassword(password, user.password);\n    // create signed jwt\n    const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\",\n    });\n    // return user and token to client, exclude hashed password\n    user.password = undefined;\n    // send token in cookie\n    res.cookie(\"token\", token, {\n      httpOnly: true,\n      // secure: true, // only works on https\n    });\n    // send user as json response\n    res.json(user);\n  } catch (err) {\n    console.log(err);\n    return res.status(400).send(\"Error. Try again.\");\n  }\n};\n"],"file":"auth.dev.js"}