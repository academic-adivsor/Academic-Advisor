{"version":3,"sources":["authcontroller.js"],"names":["bcrypt","require","mongoose","Admin","Student","Teacher","login","req","res","body","email","password","user","getUserByUsername","status","json","message","compare","passwordMatch","token","createToken","username","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,2BAAD,CAAvB;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,wBAAD,CAAvB;;AAGA,IAAMK,KAAK,GAAG,SAARA,KAAQ,CAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACkBD,GAAG,CAACE,IADtB,EACFC,KADE,aACFA,KADE,EACKC,QADL,aACKA,QADL,EAGV;;AACMC,UAAAA,IAJI,GAIGC,iBAAiB,CAACH,KAAD,CAJpB;;AAAA,cAMLE,IANK;AAAA;AAAA;AAAA;;AAAA,2CAOCJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPD;;AAAA;AAAA;AAAA,0CAWkBhB,MAAM,CAACiB,OAAP,CAAeN,QAAf,EAAyBC,IAAI,CAACD,QAA9B,CAXlB;;AAAA;AAWJO,UAAAA,aAXI;;AAaV,cAAIA,aAAJ,EAAmB;AACf;AACMC,YAAAA,KAFS,GAEDC,WAAW,CAACR,IAAD,CAFV;AAGfJ,YAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,kBAAX;AAA+BG,cAAAA,KAAK,EAALA;AAA/B,aAArB;AACH,WAJD,MAIO;AACHX,YAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AACH;;AAnBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd,C,CAsBA;;;AACA,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACQ,QAAD,EAAc;AACpC;AACA;AACA,SAAO,IAAP;AACH,CAJD,C,CAMA;;;AACA,IAAMD,WAAW,GAAG,SAAdA,WAAc,CAACR,IAAD,EAAU;AAC1B;AACA;AACA,SAAO,cAAP;AACH,CAJD;;AAMAU,MAAM,CAACC,OAAP,GAAiB;AAAEjB,EAAAA,KAAK,EAALA;AAAF,CAAjB","sourcesContent":["const bcrypt = require('bcrypt');\r\nconst mongoose = require('mongoose');\r\nconst Admin = require(\"../model/staff/Admin\");\r\nconst Student = require('../model/academic/Student');\r\nconst Teacher = require('../model/staff/Teacher');\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    // Example: Check if username exists in the database\r\n    const user = getUserByUsername(email);\r\n\r\n    if (!user) {\r\n        return res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Example: Compare the provided password with the hashed password in the database\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (passwordMatch) {\r\n        // Passwords match, create and return a token or session\r\n        const token = createToken(user);\r\n        res.status(200).json({ message: 'Login successful', token });\r\n    } else {\r\n        res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n};\r\n\r\n// Example function to get user by username from the database\r\nconst getUserByUsername = (username) => {\r\n    // Query the database to find the user by username\r\n    // Return null if the user is not found\r\n    return null;\r\n};\r\n\r\n// Example function to create a token\r\nconst createToken = (user) => {\r\n    // Use a library like jsonwebtoken to create a token\r\n    // This token can be sent with future requests for authentication\r\n    return 'exampleToken';\r\n};\r\n\r\nmodule.exports = { login };\r\n"],"file":"authcontroller.dev.js"}