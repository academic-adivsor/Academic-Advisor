{"version":3,"sources":["authcontroller.js"],"names":["bcrypt","require","mongoose","Student","login","req","res","_req$body","email","password","user","token","regeneratorRuntime","async","_context","prev","next","body","getUserByUsername","abrupt","status","json","message","awrap","compare","sent","createToken","stop","passwordMatch"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,UACjBC,SAAWD,QAAQ,YADnBD,MAASC,QAAQ,wBAGjBE,QAAUF,QAAQ,6BAFlBC,QAAWD,QAAQ,0BAMnBG,MAAQ,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAT,EAJUF,EAAAY,KAAXT,EAICD,EAJDC,MAAGP,EAIFM,EAJEN,SAQNS,EAAOQ,kBAAkBV,GAJrB,CAAAM,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAOCb,EAAIc,OAAO,KAAKC,KAAK,CAAEC,QAAS,yBAPjC,KAAA,EAAA,OAAAR,EAAAE,KAAA,EAAAJ,mBAAAW,MAAAvB,OAAAwB,QAAAf,EAAAC,EAAAD,WAAA,KAAA,EAAAK,EAAAW,MAeAd,EAAQe,YAAYhB,GAfpBJ,EAAAc,OAAA,KAAAC,KAAA,CAAAC,QAAA,mBAAAX,MAAAA,KAAAL,EAAAc,OAAA,KAAAC,KAAA,CAAAC,QAAA,wBAAA,KAAA,EAAA,IAAA,MAAA,OAAAR,EAAAa,WAOsBT,kBAPtB,WAAA,OAAA,MAWJU,YAAAA,WAGF,MAAA,gBAEuBN,OAAAA,QAAAA,CAAAA,MAAAA","file":"authcontroller.min.js","sourcesContent":["const bcrypt = require('bcrypt');\r\nconst mongoose = require('mongoose');\r\nconst Admin = require(\"../model/staff/Admin\");\r\nconst Student = require('../model/academic/Student');\r\nconst Teacher = require('../model/staff/Teacher');\r\n\r\n\r\nconst login = async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    // Example: Check if username exists in the database\r\n    const user = getUserByUsername(email);\r\n\r\n    if (!user) {\r\n        return res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Example: Compare the provided password with the hashed password in the database\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (passwordMatch) {\r\n        // Passwords match, create and return a token or session\r\n        const token = createToken(user);\r\n        res.status(200).json({ message: 'Login successful', token });\r\n    } else {\r\n        res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n};\r\n\r\n// Example function to get user by username from the database\r\nconst getUserByUsername = (username) => {\r\n    // Query the database to find the user by username\r\n    // Return null if the user is not found\r\n    return null;\r\n};\r\n\r\n// Example function to create a token\r\nconst createToken = (user) => {\r\n    // Use a library like jsonwebtoken to create a token\r\n    // This token can be sent with future requests for authentication\r\n    return 'exampleToken';\r\n};\r\n\r\nmodule.exports = { login };\r\n"]}