{"version":3,"sources":["authcontroller.js"],"names":["bcrypt","require","req","res","body","username","password","user","getUserByUsername","status","json","message","token","createToken","module","exports","login"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,UAAjBD,MAASC,SAAQC,EAAAC,GAARF,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAAAA,EAGoBC,EAAIE,KAA3BC,EAHGJ,EAGHI,SAAUC,EAHPL,EAGOK,SAGZC,EAAOC,kBAAkBH,GANpBJ,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAEDE,EAAAM,OAAA,KAAAC,KAAA,CAAAC,QAAA,yBAFCV,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAMEO,OAAkBH,QAJrBC,EAAAC,EAAAD,WAFCL,KAAAA,EAAAA,EAAAA,MAEDW,EAAAC,YAAAN,GAAAJ,EAAAM,OAAA,KAAAC,KAAA,CAAAC,QAAA,mBAAAC,MAAAA,KAAAT,EAAAM,OAAA,KAAAC,KAAA,CAAAC,QAAA,wBAFCV,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,WAEDO,kBAAA,WAAA,OAAA,MAcNK,YAAA,WAEuBF,MAAAA,gBAC1BG,OAAAC,QAAM,CAAAC,MAAAA","file":"authcontroller.min.js","sourcesContent":["const bcrypt = require('bcrypt');\r\n\r\nconst login = async (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    // Example: Check if username exists in the database\r\n    const user = getUserByUsername(username);\r\n\r\n    if (!user) {\r\n        return res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Example: Compare the provided password with the hashed password in the database\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (passwordMatch) {\r\n        // Passwords match, create and return a token or session\r\n        const token = createToken(user);\r\n        res.status(200).json({ message: 'Login successful', token });\r\n    } else {\r\n        res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n};\r\n\r\n// Example function to get user by username from the database\r\nconst getUserByUsername = (username) => {\r\n    // Query the database to find the user by username\r\n    // Return null if the user is not found\r\n    return null;\r\n};\r\n\r\n// Example function to create a token\r\nconst createToken = (user) => {\r\n    // Use a library like jsonwebtoken to create a token\r\n    // This token can be sent with future requests for authentication\r\n    return 'exampleToken';\r\n};\r\n\r\nmodule.exports = { login };\r\n"]}