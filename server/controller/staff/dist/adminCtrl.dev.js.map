{"version":3,"sources":["adminCtrl.js"],"names":["AsyncHandler","require","bcrypt","Admin","generateToken","verifyToken","hashPassword","isPassMatched","exports","registerAdmnCtrl","req","res","body","name","email","password","findOne","adminFound","Error","create","user","status","json","data","message","loginAdminCtrl","isMatched","_id","getAdminsCtrl","admins","getAdminProfileCtrl","findById","userAuth","select","admin","updateAdminCtrl","emailExist","runValidators","findByIdAndUpdate","deleteAdminCtrl","error","adminSuspendTeacherCtrl","adminUnSuspendTeacherCtrl","adminWithdrawTeacherCtrl","adminUnWithdrawTeacherCtrl","adminPublishResultsCtrl","adminUnPublishResultsCtrl"],"mappings":"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","sourcesContent":["const AsyncHandler = require(\"express-async-handler\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst Admin = require(\"../../model/staff/Admin\");\r\nconst generateToken = require(\"../../utlis/generateToken\");\r\nconst verifyToken = require(\"../../utlis/verifyToken\");\r\nconst {hashPassword, isPassMatched}=require(\"../../utlis/helpers\");\r\n//desc register admin\r\n//router POST /api/admin/register\r\n//@aces Private\r\nexports.registerAdmnCtrl = AsyncHandler(async(req, res) => {\r\n    const { name, email, password } = req.body;\r\n    //check if email exists\r\n    const adminFound = await Admin.findOne({ email });\r\n    if (adminFound) {\r\n        throw new Error(\"Admin Exists\");\r\n    }\r\n    \r\n    //register\r\n    const user = await Admin.create({\r\n        name,\r\n        email,\r\n        password: await hashPassword(password),\r\n    });\r\n    res.status(201).json({\r\n        status: \"success\",\r\n        data: user,\r\n        message: \"Admin registered successfully\",\r\n    });\r\n});\r\n//@desc login admin\r\n//@route POST /api/v1/admins/login\r\n//@access Private\r\nexports.loginAdminCtrl = AsyncHandler(async(req, res) => {\r\n    const { email, password } = req.body;\r\n    //find user\r\n    const user = await Admin.findOne({ email });\r\n    if (!user) {\r\n        return res.json({ message: \"Invalid login crendentials\" });\r\n    }\r\n    const isMatched = await isPassMatched(password, user.password);\r\n    if (!isMatched){\r\n        return res.json({ message: \"Invalid login crendentials\" });\r\n    } else {\r\n        return res.json({\r\n            data: generateToken(user._id),\r\n            message: \"Admin Logged in successfully\",\r\n        });\r\n    }\r\n});\r\n//@desc Get all admin\r\n//@route GET /api/v1/admins\r\n//@access Private\r\nexports.getAdminsCtrl = AsyncHandler(async(req, res) => {\r\n    const admins = await Admin.findOne();\r\n    res.status(200).json({\r\n        status: \"success\",\r\n        message: \"Admins Fetched successfully\",\r\n        data: admins,\r\n    });\r\n});\r\n//@desc Get single admin\r\n//@route GET /api/v1/admins/:id\r\n//@access Private\r\nexports.getAdminProfileCtrl = AsyncHandler(async(req, res) => {\r\n    const admin = await Admin.findById(req.userAuth._id).select(\"-password -createdAt -updatedAt\");\r\n    if (!admin) {\r\n        throw new Error(\"Admin not found\");\r\n    } else {\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data: admin,\r\n            message: \"Admin Profile Fetched successfully\",\r\n        });\r\n    }\r\n});\r\n//@desc update admin\r\n//@route UPDATE /api/v1/admins/:id\r\n//@access Private\r\nexports.updateAdminCtrl = AsyncHandler(async (req, res) => {\r\n    const { email, name, password } = req.body;\r\n    //if email is taken\r\n    const emailExist = await Admin.findOne({ email });\r\n    if (emailExist) {\r\n      throw new Error(\"This email is taken/exist\");\r\n    }\r\n  \r\n    //hash password\r\n    //check if user is updating password\r\n  \r\n    if (password) {\r\n      //update\r\n      const admin = await Admin.findByIdAndUpdate(\r\n        req.userAuth._id,\r\n        {\r\n          email,\r\n          password: await hashPassword(password),\r\n          name,\r\n        },\r\n        {\r\n          new: true,\r\n          runValidators: true,\r\n        }\r\n      );\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: admin,\r\n        message: \"Admin updated successfully\",\r\n      });\r\n    } else {\r\n      //update\r\n      const admin = await Admin.findByIdAndUpdate(\r\n        req.userAuth._id,\r\n        {\r\n          email,\r\n          name,\r\n        },\r\n        {\r\n          new: true,\r\n          runValidators: true,\r\n        }\r\n      );\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: admin,\r\n        message: \"Admin updated successfully\",\r\n      });\r\n    }\r\n  });\r\n//@desc delete admin\r\n//@route DELETE /api/v1/admins/:id\r\n//@access Private\r\nexports.deleteAdminCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"delete admin\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin suspend a teacher\r\n//@route PUT /api/v1/admins/suspend/teacher:id\r\n//@access Private\r\nexports.adminSuspendTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin suspend teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin unsuspend a teacher\r\n//@route PUT /api/v1/admins/unsuspend/teacher:id\r\n//@access Private\r\nexports.adminUnSuspendTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin unsuspend teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin withdraws a teacher\r\n//@route PUT /api/v1/admins/withdraws/teacher:id\r\n//@access Private\r\nexports.adminWithdrawTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin withdraw teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin unwithdraws a teacher\r\n//@route PUT /api/v1/admins/unwithdraws/teacher:id\r\n//@access Private\r\nexports.adminUnWithdrawTeacherCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin unwithdraw teacher\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin publish exam results\r\n//@route PUT /api/v1/admins/publish/exam:id\r\n//@access Private\r\nexports.adminPublishResultsCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin publish exam results\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};\r\n//@desc admin unpublish exam results\r\n//@route PUT /api/v1/admins/unpublish/exam:id\r\n//@access Private\r\nexports.adminUnPublishResultsCtrl = (req, res) => {\r\n    try {\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data: \"admin unpublish exam results\",\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: \"failed\",\r\n            error: error.message,\r\n        });\r\n    }\r\n};"],"file":"adminCtrl.dev.js"}