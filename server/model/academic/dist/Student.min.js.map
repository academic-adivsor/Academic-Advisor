{"version":3,"sources":["Student.js"],"names":["mongoose","require","studentSchema","Schema","name","required","type","String","email","password","studentId","Math","floor","random","Date","toString","slice","join","split","map","role","classLevels","Types","ref","default","dateAdmitted","this","length","academicYear","examResults","ObjectId","program","isPromotedToLevel200","isPromotedToLevel400","Boolean","isGraduated","isWithdrawn","isSuspended","prefectName","yearGraduated","timestamps","Student","model","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,cAAgB,IAAIF,SAASG,OADnC,CAGIC,KAAM,CAFJF,KAAAA,OAEEG,UAAE,GAEJA,MAAAA,CAHJC,KAAAC,OAKEC,UAAO,GAELH,SAAU,CAPdC,KAAAC,OASEE,UAAU,GAERJ,UAAU,CAXdC,KAAAC,OAaEG,UAAW,EACTJ,QAAMC,WACNF,MACA,MACEM,KACEC,MACAD,IAAsBE,IAAjBD,KAAMC,UAIAC,KAAIV,MAAIW,WAARC,MAAA,EAAA,GACRC,KAAKb,KAGXc,MAAA,KA3BLC,IAAA,SAAAf,GAAA,OAAAA,EAAA,KA6BQa,KAAA,IACEV,gBAIRa,KAAA,CACAC,KAAAA,OAEIf,QAAMN,WAKRM,YADiB,CAEjB,CACEA,KAAON,SAAKqB,OAAYC,MAAKD,SAC9BE,IAAA,eAGDjB,kBAAeH,CACfoB,KAAKhB,OAjDTiB,QAAA,WAmDEC,OAAYC,KAAEL,YAAAK,KAAAL,YAAAM,OAAA,KAnDhBC,aAAA,CAwDEC,KAAAA,SACE1B,OAAAmB,MAAAQ,SACExB,IAAMN,gBA1DZyB,aAAA,CA+DEM,KAASjB,KACPR,QAAMN,KAASG,KAIjB6B,YAAAA,CACE1B,CACAA,KAAAN,SAASG,OAAAmB,MAAAQ,SAtEbP,IAAA,eAAAQ,QAAA,CA4EEE,KAAAA,SAAAA,OAAsBX,MAAAQ,SACpBxB,IAAM4B,WAGRC,qBAAa,CACX7B,KAAM4B,QACNV,SAAS,GAEXY,qBAAa,CACX9B,KAAM4B,QACNV,SAAS,GAEXa,qBAAa,CACX/B,KAAM4B,QACNV,SAAS,GAEXc,YAAa,CACXhC,KAAMC,QA7FViB,SAAA,GAgGEY,YAAA,CACA9B,KAAA4B,QACAV,SAAA,GAEAa,YAAA,CACA/B,KAAA4B,QACAV,SAAA,GAEAc,YAAA,CACAhC,KAAAC,QAGAgC,cAAe,CACbjC,KAAMC,SAGV,CACEiC,YAAY,IAKVC,QAAUzC,SAAS0C,MAAM,UAAWxC,eAE1CyC,OAAOC,QAAUH","file":"Student.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\nconst studentSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n    studentId: {\n      type: String,\n      required: true,\n      default: function () {\n        return (\n          \"STU\" +\n          Math.floor(100 + Math.random() * 900) +\n          Date.now().toString().slice(2, 4) +\n          this.name\n            .split(\" \")\n            .map(name => name[0])\n            .join(\"\")\n            .toUpperCase()\n        );\n      },\n    },\n    role: {\n      type: String,\n      default: \"student\",\n    },\n    //Classes are from level 1 to 6\n    //keep track of the class level the student is in\n    classLevels: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"ClassLevel\",\n      },\n    ],\n    currentClassLevel: {\n      type: String,\n      default: function () {\n        return this.classLevels[this.classLevels.length - 1];\n      },\n    },\n    academicYear: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"AcademicYear\",\n    },\n    dateAdmitted: {\n      type: Date,\n      default: Date.now,\n    },\n\n    examResults: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"ExamResult\",\n      },\n    ],\n\n    program: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Program\",\n    },\n\n    isPromotedToLevel200: {\n      type: Boolean,\n      default: false,\n    },\n    isPromotedToLevel300: {\n      type: Boolean,\n      default: false,\n    },\n    isPromotedToLevel400: {\n      type: Boolean,\n      default: false,\n    },\n    isGraduated: {\n      type: Boolean,\n      default: false,\n    },\n    isWithdrawn: {\n      type: Boolean,\n      default: false,\n    },\n    isSuspended: {\n      type: Boolean,\n      default: false,\n    },\n    prefectName: {\n      type: String,\n    },\n    // behaviorReport: [\n    //   {\n    //     type: mongoose.Schema.Types.ObjectId,\n    //     ref: \"BehaviorReport\",\n    //   },\n    // ],\n    // financialReport: [\n    //   {\n    //     type: mongoose.Schema.Types.ObjectId,\n    //     ref: \"FinancialReport\",\n    //   },\n    // ],\n    //year group\n    yearGraduated: {\n      type: String,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\n//model\nconst Student = mongoose.model(\"Student\", studentSchema);\n\nmodule.exports = Student;\n"]}