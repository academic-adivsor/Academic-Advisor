{"version":3,"sources":["Program.js"],"names":["mongoose","require","Schema","name","type","String","required","description","duration","default","code","this","split","toUpperCase","map","join","Types","ObjectId","random","Math","floor","teachers","ref","timestamps","subjects","Program","model","ProgramSchema","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YAAnBD,OAAWC,SAAXD,OAEEE,cAAAA,IAAAA,OAER,CAEIC,KAAM,CACJC,KAAMC,OACNC,UAAU,GAEZC,YAAa,CACXH,KAAMC,OACNC,UAAU,GAEZE,SAAU,CACRJ,KAAMC,OACNC,UAAU,EACVG,QAAS,WAIXC,KAAM,CACJN,KAAMC,OACNI,QAAS,WACP,OAGaE,KAAIR,KAFfS,MAIGC,KAINC,IAAA,SAAAX,GAAA,OAAAA,EAAA,KA5BLY,KAAA,IA8BaF,cACHX,KAAAA,MAAOc,GADJ,GACUC,KADVC,UAEJC,KAAAC,MAFI,GAAA,GAAAD,KAAAD,YAMXG,UACE,CACEjB,KAAMF,OAAOc,MAAMC,SACnBK,IAAK,QAvCXhB,UAAA,GA6CMgB,SAAK,CACL,CA9CNlB,KAAAF,OAAAc,MAAAC,SAiDEK,IAAA,YAIIA,SAAK,CACL,CAJMlB,KAAAF,OAAAc,MAAAC,SAQZK,IAAA,UAAEC,QAAY,KARZC,SAAU,CACR,CACEpB,KAAMF,OAAOc,MAAMC,SACnBK,IAAK,UACLb,QAAS,MAIf,CAAEc,YAAY,IAEVE,QAAUzB,SAAS0B,MAAM,UAAWC,eAE1CC,OAAOC,QAAUJ","file":"Program.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\n\nconst { Schema } = mongoose;\n\nconst ProgramSchema = new Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    description: {\n      type: String,\n      required: true,\n    },\n    duration: {\n      type: String,\n      required: true,\n      default: \"4 years\",\n    },\n    // created automatically\n    //CSFTY\n    code: {\n      type: String,\n      default: function () {\n        return (\n          this.name\n            .split(\" \")\n            .map(name => name[0])\n            .join(\"\")\n            .toUpperCase() +\n          Math.floor(10 + Math.random() * 90) +\n          Math.floor(10 + Math.random() * 90)\n        );\n      },\n    },\n    createdBy: {\n      type: Schema.Types.ObjectId,\n      ref: \"Admin\",\n      required: true,\n    },\n    //we will push the teachers that are in charge of the program\n    teachers: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"Teacher\",\n      },\n    ],\n    students: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"Student\",\n        default: [],\n      },\n    ],\n    //we will push the subjects that are in the program when the program is created\n    subjects: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"Subject\",\n        default: [],\n      },\n    ],\n  },\n  { timestamps: true }\n);\nconst Program = mongoose.model(\"Program\", ProgramSchema);\n\nmodule.exports = Program;\n"]}