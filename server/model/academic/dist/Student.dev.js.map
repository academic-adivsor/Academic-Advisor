{"version":3,"sources":["Student.js"],"names":["mongoose","require","studentSchema","Schema","name","type","String","required","email","password","studentId","Math","floor","random","Date","now","toString","slice","split","map","join","toUpperCase","role","classLevels","Types","ObjectId","ref","currentClassLevel","length","academicYear","dateAdmitted","examResults","program","isPromotedToLevel200","Boolean","isPromotedToLevel300","isPromotedToLevel400","isGraduated","isWithdrawn","isSuspended","prefectName","yearGraduated","timestamps","Student","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst studentSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n    studentId: {\n      type: String,\n      required: true,\n      default: function () {\n        return (\n          \"STU\" +\n          Math.floor(100 + Math.random() * 900) +\n          Date.now().toString().slice(2, 4) +\n          this.name\n            .split(\" \")\n            .map(name => name[0])\n            .join(\"\")\n            .toUpperCase()\n        );\n      },\n    },\n    role: {\n      type: String,\n      default: \"student\",\n    },\n    //Classes are from level 1 to 6\n    //keep track of the class level the student is in\n    classLevels: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"ClassLevel\",\n      },\n    ],\n    currentClassLevel: {\n      type: String,\n      default: function () {\n        return this.classLevels[this.classLevels.length - 1];\n      },\n    },\n    academicYear: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"AcademicYear\",\n    },\n    dateAdmitted: {\n      type: Date,\n      default: Date.now,\n    },\n\n    examResults: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"ExamResult\",\n      },\n    ],\n\n    program: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Program\",\n    },\n\n    isPromotedToLevel200: {\n      type: Boolean,\n      default: false,\n    },\n    isPromotedToLevel300: {\n      type: Boolean,\n      default: false,\n    },\n    isPromotedToLevel400: {\n      type: Boolean,\n      default: false,\n    },\n    isGraduated: {\n      type: Boolean,\n      default: false,\n    },\n    isWithdrawn: {\n      type: Boolean,\n      default: false,\n    },\n    isSuspended: {\n      type: Boolean,\n      default: false,\n    },\n    prefectName: {\n      type: String,\n    },\n    // behaviorReport: [\n    //   {\n    //     type: mongoose.Schema.Types.ObjectId,\n    //     ref: \"BehaviorReport\",\n    //   },\n    // ],\n    // financialReport: [\n    //   {\n    //     type: mongoose.Schema.Types.ObjectId,\n    //     ref: \"FinancialReport\",\n    //   },\n    // ],\n    //year group\n    yearGraduated: {\n      type: Date,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\n//model\nconst Student = mongoose.model(\"Student\", studentSchema);\n\nmodule.exports = Student;\n"],"file":"Student.dev.js"}