{"version":3,"sources":["ExamResults.js"],"names":["mongoose","require","Schema","examResultSchema","studentID","type","String","required","exam","Types","ObjectId","ref","grade","Number","score","passMark","status","remarks","classLevel","academicTerm","academicYear","isPublished","Boolean","timestamps","ExamResult","model","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;IAEQC,M,GAAWF,Q,CAAXE,M,EAER;;AACA,IAAMC,gBAAgB,GAAG,IAAID,MAAJ,CACvB;AACEE,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADb;AAKEC,EAAAA,IAAI,EAAE;AACJH,IAAAA,IAAI,EAAEH,MAAM,CAACO,KAAP,CAAaC,QADf;AAEJC,IAAAA,GAAG,EAAE,MAFD;AAGJJ,IAAAA,QAAQ,EAAE;AAHN,GALR;AAUEK,EAAAA,KAAK,EAAE;AACLP,IAAAA,IAAI,EAAEQ,MADD;AAELN,IAAAA,QAAQ,EAAE;AAFL,GAVT;AAcEO,EAAAA,KAAK,EAAE;AACLT,IAAAA,IAAI,EAAEQ,MADD;AAELN,IAAAA,QAAQ,EAAE;AAFL,GAdT;AAkBEQ,EAAAA,QAAQ,EAAE;AACRV,IAAAA,IAAI,EAAEQ,MADE;AAERN,IAAAA,QAAQ,EAAE,IAFF;AAGR,eAAS;AAHD,GAlBZ;AAuBE;AACAS,EAAAA,MAAM,EAAE;AACNX,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGN,YAAM,CAAC,MAAD,EAAS,MAAT,CAHA;AAIN,eAAS;AAJH,GAxBV;AA8BE;AACAU,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,IAFH;AAGP,YAAM,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,EAA8B,MAA9B,CAHC;AAIP,eAAS;AAJF,GA/BX;AAsCEW,EAAAA,UAAU,EAAE;AACVb,IAAAA,IAAI,EAAEL,QAAQ,CAACE,MAAT,CAAgBO,KAAhB,CAAsBC,QADlB;AAEVC,IAAAA,GAAG,EAAE;AAFK,GAtCd;AA0CEQ,EAAAA,YAAY,EAAE;AACZd,IAAAA,IAAI,EAAEL,QAAQ,CAACE,MAAT,CAAgBO,KAAhB,CAAsBC,QADhB;AAEZC,IAAAA,GAAG,EAAE,cAFO;AAGZJ,IAAAA,QAAQ,EAAE;AAHE,GA1ChB;AA+CEa,EAAAA,YAAY,EAAE;AACZf,IAAAA,IAAI,EAAEL,QAAQ,CAACE,MAAT,CAAgBO,KAAhB,CAAsBC,QADhB;AAEZC,IAAAA,GAAG,EAAE,cAFO;AAGZJ,IAAAA,QAAQ,EAAE;AAHE,GA/ChB;AAoDEc,EAAAA,WAAW,EAAE;AACXhB,IAAAA,IAAI,EAAEiB,OADK;AAEX,eAAS;AAFE;AApDf,CADuB,EA0DvB;AACEC,EAAAA,UAAU,EAAE;AADd,CA1DuB,CAAzB;AA+DA,IAAMC,UAAU,GAAGxB,QAAQ,CAACyB,KAAT,CAAe,YAAf,EAA6BtB,gBAA7B,CAAnB;AAEAuB,MAAM,CAACC,OAAP,GAAiBH,UAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\n\nconst { Schema } = mongoose;\n\n//exam result schema\nconst examResultSchema = new Schema(\n  {\n    studentID: {\n      type: String,\n      required: true,\n    },\n    exam: {\n      type: Schema.Types.ObjectId,\n      ref: \"Exam\",\n      required: true,\n    },\n    grade: {\n      type: Number,\n      required: true,\n    },\n    score: {\n      type: Number,\n      required: true,\n    },\n    passMark: {\n      type: Number,\n      required: true,\n      default: 50,\n    },\n    //failed/Passed\n    status: {\n      type: String,\n      required: true,\n      enum: [\"Pass\", \"Fail\"],\n      default: \"Fail\",\n    },\n    //Excellent/Good/Poor\n    remarks: {\n      type: String,\n      required: true,\n      enum: [\"Excellent\", \"Good\", \"Poor\", \"Fair\"],\n      default: \"Poor\",\n    },\n\n    classLevel: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"ClassLevel\",\n    },\n    academicTerm: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"AcademicTerm\",\n      required: true,\n    },\n    academicYear: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"AcademicYear\",\n      required: true,\n    },\n    isPublished: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nconst ExamResult = mongoose.model(\"ExamResult\", examResultSchema);\n\nmodule.exports = ExamResult;\n"],"file":"ExamResults.dev.js"}