{"version":3,"sources":["app.js"],"names":["require","private_key","process","env","DIALOGFLOW_PRIVATE_KEY","client_email","DIALOGFLOW_CLIENT_EMAIL","express","bodyParser","morgan","cors","app","globalErrHandler","notFoundErr","academicTermRouter","academicYearRouter","classLevelRouter","programRouter","subjectRouter","yearGroupRouter","adminRouter","chatRoute","use","json","whitelist","corsOptions","origin","callback","indexOf","Error","dialogflow","uuid","sessionClient","SessionsClient","credentials","sessionPath","v4","processUserMessage","userMessage","request","session","queryInput","text","languageCode","detectIntent","responses","botResponse","queryResult","fulfillmentText","console","error","urlencoded","extended","module","exports"],"mappings":"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","sourcesContent":["require(\"../config/dbConnect\");\r\nconst private_key = process.env.DIALOGFLOW_PRIVATE_KEY;\r\nconst client_email = process.env.DIALOGFLOW_CLIENT_EMAIL;\r\nconst express = require(\"express\");\r\nconst bodyParser = require('body-parser');\r\nconst morgan = require(\"morgan\");\r\nconst cors = require('cors');\r\nconst app = express();\r\nconst { globalErrHandler, notFoundErr, } = require(\"../middlewares/globalErrHandler\");\r\nconst academicTermRouter = require(\"../routes/academics/academicTerm\");\r\nconst academicYearRouter = require(\"../routes/academics/academicYear\");\r\nconst classLevelRouter=require(\"../routes/academics/classLevel\");\r\nconst programRouter=require(\"../routes/academics/program\");\r\nconst subjectRouter=require(\"../routes/academics/subjects\");\r\nconst yearGroupRouter=require(\"../routes/academics/yearGroups\");\r\nconst adminRouter = require(\"../routes/staff/adminRouter\");\r\nconst chatRoute = require(\"../routes/chatRoute\");\r\napp.use(require('../routes/chatRoute'));\r\napp.use(express.json());\r\napp.use(bodyParser.json());\r\n//routes\r\n//admin register\r\napp.use(\"/api/v1/admins\", adminRouter);\r\napp.use(\"/api/v1/academic-years\", academicYearRouter);\r\napp.use(\"/api/v1/academic-terms\", academicTermRouter);\r\napp.use(\"/api/v1/class-levels\", classLevelRouter);\r\napp.use(\"/api/v1/programs\", programRouter);\r\napp.use(\"/api/v1/subjects\", subjectRouter);\r\napp.use(\"/api/v1/year-groups\", yearGroupRouter);\r\napp.use(\"/api/v1/chat\", chatRoute);\r\n//Error middlewares\r\napp.use(notFoundErr);\r\napp.use(globalErrHandler);\r\nconst whitelist = [\r\n  'http://Admin-Dashboard-localhost:8800',\r\n  'http://Student-Dashboard-main-localhost:8800',\r\n  'http://Doctor_DashBord-localhost:8800',\r\n  'http://localhost:8800',\r\n\r\n];\r\n\r\nconst corsOptions = {\r\n  origin: function (origin, callback) {\r\n    if (whitelist.indexOf(origin) !== -1) {\r\n      callback(null, true);\r\n    } else {\r\n      callback(new Error('Not allowed by CORS'));\r\n    }\r\n  },\r\n};\r\n\r\napp.use(cors(corsOptions));\r\n\r\nconst dialogflow = require('dialogflow');\r\nconst uuid = require('uuid');\r\n\r\n// Initialize session client\r\nconst sessionClient = new dialogflow.SessionsClient({\r\n  credentials: {\r\n    private_key,\r\n    client_email\r\n  }\r\n});\r\n\r\nconst sessionPath = sessionClient.sessionPath('parker-pslk', uuid.v4());\r\n\r\nconst processUserMessage = async (userMessage) => {\r\n  const request = {\r\n    session: sessionPath,\r\n    queryInput: {\r\n      text: {\r\n        text: userMessage,\r\n        languageCode: 'en-US',\r\n      },\r\n    },\r\n  };\r\n\r\n  try {\r\n    const responses = await sessionClient.detectIntent(request);\r\n    const botResponse = responses[0].queryResult.fulfillmentText;\r\n\r\n    return botResponse;\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    return 'Oops! Something went wrong. Please try again.'; // Default error message\r\n  }\r\n};\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\nmodule.exports = app;"],"file":"app.dev.js"}