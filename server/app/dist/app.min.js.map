{"version":3,"sources":["app.js"],"names":["require","private_key","process","env","DIALOGFLOW_PRIVATE_KEY","DIALOGFLOW_CLIENT_EMAIL","express","client_email","cors","globalErrHandler","notFoundErr","bodyParser","academicYearRouter","morgan","programRouter","yearGroupRouter","app","chatRouter","use","json","adminRouter","academicTermRouter","classLevelRouter","subjectRouter","origin","callback","whitelist","indexOf","Error","corsOptions","credentials","sessionPath","sessionClient","uuid","v4","processUserMessage","userMessage","request","responses","botResponse","regeneratorRuntime","async","_context","prev","next","dialogflow","session","text","awrap","sent","queryResult","fulfillmentText","abrupt","t0","console","error","stop","queryInput","extended"],"mappings":"aAAAA,QAAQ,uBACR,IAAMC,YAAcC,QAAQC,IAAIC,uBADhCJ,aAAQE,QAADC,IAAPE,wBAGMC,QAAUN,QAAQ,WAFlBC,WAAcC,QAAQC,eACtBI,OAAAA,QAAeL,UAIfM,KAAOR,QAAQ,QAHfM,IAAOA,mBAK8BN,QAAQ,mCAA3CS,0BAAAA,iBAAkBC,qBAAAA,YAJpBC,mBAAqBX,QAAA,oCAMrBY,mBAAqBZ,QAAQ,oCAL7Ba,iBAAiBb,QAAvB,kCAOMc,cAAcd,QAAQ,+BANtBQ,cAAeR,QAArB,gCAQMe,gBAAgBf,QAAQ,kCAPxBgB,YAANhB,QAAA,+BASMiB,WAAajB,QAAQ,wBAC3BgB,IAAIE,IAAIlB,QATmCA,yBAU3CgB,IAVQP,IAAAA,QAAAA,QAWRO,IAX0BN,IAAAA,WAWPS,QAGnBH,IAAIE,IAAI,iBAAkBE,aAZ1BJ,IAAMJ,IAAAA,yBAA6BA,oBAcnCI,IAAIE,IAAI,yBAA0BG,oBAblCL,IAAMM,IAAAA,uBAAyBA,kBAe/BN,IAAIE,IAAI,mBAAoBJ,eAd5BE,IAAMF,IAAAA,mBAAsBS,eAgB5BP,IAAIE,IAAI,sBAAuBH,iBAf/BC,IAAMO,IAAAA,eAAcvB,YACpBgB,IAAMD,IAAAA,aAkBNC,IAAIE,IAAIT,kBAjBR,IAAMW,UAAcpB,CAmBlB,0BAlBF,yBAGIkB,YAAeC,CAEnBK,OAAA,SAAAA,EAAAC,IAoBuC,IAA/BC,UAAUC,QAAQH,GAnBtBN,EAAI,MAAA,GAEJA,EAAI,IAAAU,MAAA,0BAKRZ,IAAIE,IAAIV,KAAAqB,cAERb,IAAIE,WAAJlB,QAAA,cACIkB,KAAIT,QAAAA,QAQNe,cAAQ,IAAUA,WAAQC,eAAU,CAClCK,YAAIJ,CACFD,YAAAA,YACDlB,aAAAA,gBAJLwB,YAAAC,cAAAD,YAAA,cAAAE,KAAAC,MAyBMC,mBAAqB,SAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAbrBC,EAAa7C,CAef8C,QAASf,YAdPE,WAAOjC,CAgBP+C,KAAM,CACJA,KAAMX,EAdRJ,aAAgB,WASKU,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAQ,MAFPhB,cAAcD,aAAYM,IAEnB,KAAA,EAAA,OAFrBN,EAEqBW,EAAAO,KAajBV,EAAcD,EAAU,GAAGY,YAAYC,gBAbtBT,EAAAU,OAAA,SAAAb,GAAA,KAAA,EAAA,OAAAG,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,MAAA,GAAAY,QAAAC,MAAA,SAAAb,EAAAW,IAAAX,EAAAU,OAAA,SAAA,iDAAA,KAAA,GAAA,IAAA,MAAA,OAAAV,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAGvBC,IAAAA,IAAAA,WAAAA,WAAY,CAAAC,UAAA,KACVX,IAAAA,IAAAA,WAAI5B,QACF4B,OAAAA,QAAAA","file":"app.min.js","sourcesContent":["require(\"../config/dbConnect\");\r\nconst private_key = process.env.DIALOGFLOW_PRIVATE_KEY;\r\nconst client_email = process.env.DIALOGFLOW_CLIENT_EMAIL;\r\nconst express = require(\"express\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst morgan = require(\"morgan\");\r\nconst cors = require(\"cors\");\r\nconst app = express();\r\nconst { globalErrHandler, notFoundErr, } = require(\"../middlewares/globalErrHandler\");\r\nconst academicTermRouter = require(\"../routes/academics/academicTerm\");\r\nconst academicYearRouter = require(\"../routes/academics/academicYear\");\r\nconst classLevelRouter=require(\"../routes/academics/classLevel\");\r\nconst programRouter=require(\"../routes/academics/program\");\r\nconst subjectRouter=require(\"../routes/academics/subjects\");\r\nconst yearGroupRouter=require(\"../routes/academics/yearGroups\");\r\nconst adminRouter = require(\"../routes/staff/adminRouter\");\r\nconst chatRouter = require(\"../routes/chatRouter\");\r\napp.use(require(\"../routes/chatRouter\"));\r\napp.use(express.json());\r\napp.use(bodyParser.json());\r\n//routes\r\n//admin register\r\napp.use(\"/api/v1/admins\", adminRouter);\r\napp.use(\"/api/v1/academic-years\", academicYearRouter);\r\napp.use(\"/api/v1/academic-terms\", academicTermRouter);\r\napp.use(\"/api/v1/class-levels\", classLevelRouter);\r\napp.use(\"/api/v1/programs\", programRouter);\r\napp.use(\"/api/v1/subjects\", subjectRouter);\r\napp.use(\"/api/v1/year-groups\", yearGroupRouter);\r\napp.use(\"/api/v1/chat\", chatRouter);\r\n//Error middlewares\r\napp.use(notFoundErr);\r\napp.use(globalErrHandler);\r\nconst whitelist = [\r\n  'http://192.168.1.7:8080',\r\n  'http://127.0.0.1:8080',\r\n\r\n];\r\n\r\nconst corsOptions = {\r\n  origin: function (origin, callback) {\r\n    if (whitelist.indexOf(origin) !== -1) {\r\n      callback(null, true);\r\n    } else {\r\n      callback(new Error('Not allowed by CORS'));\r\n    }\r\n  },\r\n};\r\n\r\napp.use(cors(corsOptions));\r\n\r\nconst dialogflow = require('dialogflow');\r\nconst uuid = require('uuid');\r\n\r\n// Initialize session client\r\nconst sessionClient = new dialogflow.SessionsClient({\r\n  credentials: {\r\n    private_key,\r\n    client_email\r\n  }\r\n});\r\n\r\nconst sessionPath = sessionClient.sessionPath(\"parker-pslk\", uuid.v4());\r\n\r\nconst processUserMessage = async (userMessage) => {\r\n  const request = {\r\n    session: sessionPath,\r\n    queryInput: {\r\n      text: {\r\n        text: userMessage,\r\n        languageCode: 'en-US',\r\n      },\r\n    },\r\n  };\r\n\r\n  try {\r\n    const responses = await sessionClient.detectIntent(request);\r\n    const botResponse = responses[0].queryResult.fulfillmentText;\r\n\r\n    return botResponse;\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    return 'Oops! Something went wrong. Please try again.'; // Default error message\r\n  }\r\n};\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\nmodule.exports = app;"]}