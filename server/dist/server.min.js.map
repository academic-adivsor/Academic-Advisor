{"version":3,"sources":["server.js"],"names":["require","config","mongoose","express","bodyParser","uuid","server","http","createServer","app","dialogflow","PORT","connect","process","env","MONGO_URL","useNewUrlParser","useUnifiedTopology","sessionClient","SessionsClient","credentials","port","DIALOGFLOW_CLIENT_EMAIL","sessionPath","v4","urlencoded","extended","private_key","adminRouter","academicTermRouter","classLevelRouter","use","yearGroupRouter","json","academicYearRouter","subjectRouter","chatRouter","next","res","status","message","req","console","error","err","listen","log"],"mappings":"aAAAA,QAAQ,UAAUC,SAAlBD,IAAAA,QAAOA,QAAP,WAGME,SAAWF,QAAQ,YADnBG,KAAOH,QAAU,QAGjBI,WAAaJ,QAAQ,eAFrBE,WAAWF,QAAQ,cAInBK,KAAOL,QAAQ,QAHrBA,QAAU,qBAAVA,GACA,IAAMI,IAAAA,UAMAE,OAASC,KAAKC,aAAaC,KAL3BC,KAAAA,QAAaV,IAAQW,MAAA,IAS3BT,SAASU,QAAQC,QAAQC,IAAIC,UAAW,CAAEC,iBAAiB,EAAMC,oBAAoB,IAGrF,IAAMC,cAAgB,IAAIR,WAAWS,eAAe,CARpDC,YAAYjB,CACNG,YAAaO,QAACL,IAAAA,uBACda,aAAcR,QAAKF,IAAZW,2BAKbC,YAAAL,cAAAK,YAAA,cAAAlB,KAAAmB,MAEEJ,IAAAA,IAAAA,WAAaK,WAAA,CAAAC,UAAA,KACXC,IAAAA,IAAAA,WAAad,QAFmC,IAOpDe,YAAA5B,QAAA,8BASM6B,mBAAqB7B,QAAQ,mCAR7BuB,mBAAcL,QAAcK,mCAU5BO,iBAAmB9B,QAAQ,iCAP7B+B,cAAeN,QAAW,8BAAEC,cAAU1B,QAAA,+BAA1CgC,gBAAAhC,QAAA,iCACI+B,WAAeE,QAUQ,uBAP3BxB,IAAMmB,IAAAA,iBAAsBA,aAU5BnB,IAAIsB,IAAI,yBAA0BG,oBATlCzB,IAAMoB,IAAAA,yBAA6BA,oBAWnCpB,IAAIsB,IAAI,uBAAwBD,kBAVhCrB,IAAMyB,IAAAA,mBAAqBlC,eAY3BS,IAAIsB,IAAI,mBAAoBI,eAX5B1B,IAAMqB,IAAAA,sBAA2BE,iBAajCvB,IAAIsB,IAAI,eAAgBK,YAXxB3B,IAAM0B,IAAAA,SAAAA,EAAAA,EAAaE,GAejBC,EAAIC,OAAO,KAAKN,KAAK,CAAEO,QAAS,gBAblC/B,IAAM2B,IAAAA,SAAAA,EAAUK,EAAGzC,EAAOqC,GAiBxBK,QAAQC,MAAM,SAAUC,GAf1BnC,EAAIsB,OAAI,KAAAE,KAAA,CAARO,QAA0BZ,4BAI1BnB,OAAAoC,OAAQxB,KAAA,WACRZ,QAAQqC,IAARrC,6BAAAA,OAAAY","file":"server.min.js","sourcesContent":["require(\"dotenv\").config(); \r\n\r\nconst express = require(\"express\");\r\nconst mongoose = require('mongoose');\r\nconst http = require('http');\r\nconst bodyParser = require('body-parser');\r\nconst dialogflow = require('dialogflow');\r\nconst uuid = require('uuid');\r\nrequire(\"./config/dbConnect\")(); // This will call the function and attempt to connect to the database.\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst port = process.env.PORT || 8000;\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGO_URL, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\n// Initialize session client\r\nconst sessionClient = new dialogflow.SessionsClient({\r\n  credentials: {\r\n    private_key: process.env.DIALOGFLOW_PRIVATE_KEY,\r\n    client_email: process.env.DIALOGFLOW_CLIENT_EMAIL\r\n  }\r\n});\r\n\r\n// Generate session path\r\nconst sessionPath = sessionClient.sessionPath('parker-pslk', uuid.v4());\r\n\r\n// Middlewares\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\n\r\n// Load routes (if they are in separate files)\r\nconst adminRouter = require(\"./routes/staff/adminRouter\");\r\nconst academicTermRouter = require(\"./routes/academics/academicTerm\");\r\nconst academicYearRouter = require(\"./routes/academics/academicYear\");\r\nconst classLevelRouter = require(\"./routes/academics/classLevel\");\r\nconst programRouter = require(\"./routes/academics/program\");\r\nconst subjectRouter = require(\"./routes/academics/subjects\");\r\nconst yearGroupRouter = require(\"./routes/academics/yearGroups\");\r\nconst chatRouter = require(\"./routes/chatRouter\");\r\n\r\napp.use(\"/api/v1/admins\", adminRouter);\r\napp.use(\"/api/v1/academic-years\", academicYearRouter);\r\napp.use(\"/api/v1/academic-terms\", academicTermRouter);\r\napp.use(\"/api/v1/class-levels\", classLevelRouter);\r\napp.use(\"/api/v1/programs\", programRouter);\r\napp.use(\"/api/v1/subjects\", subjectRouter);\r\napp.use(\"/api/v1/year-groups\", yearGroupRouter);\r\napp.use(\"/api/v1/chat\", chatRouter);\r\n\r\n// Error middlewares\r\napp.use((req, res, next) => {\r\n  res.status(404).json({ message: 'Not Found' });\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n  console.error('Error:', err);\r\n  res.status(500).json({ message: 'Internal Server Error' });\r\n});\r\n\r\n// Start server\r\nserver.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});"]}