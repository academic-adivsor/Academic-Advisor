{"version":3,"sources":["server.js"],"names":["require","config","express","mongoose","http","bodyParser","dialogflow","uuid","app","server","createServer","port","process","env","PORT","connect","MONGO_URL","useNewUrlParser","useUnifiedTopology","sessionClient","SessionsClient","credentials","private_key","DIALOGFLOW_PRIVATE_KEY","client_email","DIALOGFLOW_CLIENT_EMAIL","sessionPath","v4","use","urlencoded","extended","json","adminRouter","academicTermRouter","academicYearRouter","classLevelRouter","programRouter","subjectRouter","yearGroupRouter","chatRouter","req","res","next","status","message","err","console","error","listen","log"],"mappings":"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","sourcesContent":["require(\"dotenv\").config(); \r\n\r\nconst express = require(\"express\");\r\nconst mongoose = require('mongoose');\r\nconst http = require('http');\r\nconst bodyParser = require('body-parser');\r\nconst dialogflow = require('dialogflow');\r\nconst uuid = require('uuid');\r\nrequire(\"./config/dbConnect\")(); // This will call the function and attempt to connect to the database.\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst port = process.env.PORT || 8000;\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGO_URL, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\n// Initialize session client\r\nconst sessionClient = new dialogflow.SessionsClient({\r\n  credentials: {\r\n    private_key: process.env.DIALOGFLOW_PRIVATE_KEY,\r\n    client_email: process.env.DIALOGFLOW_CLIENT_EMAIL\r\n  }\r\n});\r\n\r\n// Generate session path\r\nconst sessionPath = sessionClient.sessionPath('parker-pslk', uuid.v4());\r\n\r\n// Middlewares\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\n\r\n// Load routes (if they are in separate files)\r\nconst adminRouter = require(\"./routes/staff/adminRouter\");\r\nconst academicTermRouter = require(\"./routes/academics/academicTerm\");\r\nconst academicYearRouter = require(\"./routes/academics/academicYear\");\r\nconst classLevelRouter = require(\"./routes/academics/classLevel\");\r\nconst programRouter = require(\"./routes/academics/program\");\r\nconst subjectRouter = require(\"./routes/academics/subjects\");\r\nconst yearGroupRouter = require(\"./routes/academics/yearGroups\");\r\nconst chatRouter = require(\"./routes/chatRouter\");\r\n\r\napp.use(\"/api/v1/admins\", adminRouter);\r\napp.use(\"/api/v1/academic-years\", academicYearRouter);\r\napp.use(\"/api/v1/academic-terms\", academicTermRouter);\r\napp.use(\"/api/v1/class-levels\", classLevelRouter);\r\napp.use(\"/api/v1/programs\", programRouter);\r\napp.use(\"/api/v1/subjects\", subjectRouter);\r\napp.use(\"/api/v1/year-groups\", yearGroupRouter);\r\napp.use(\"/api/v1/chat\", chatRouter);\r\n\r\n// Error middlewares\r\napp.use((req, res, next) => {\r\n  res.status(404).json({ message: 'Not Found' });\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n  console.error('Error:', err);\r\n  res.status(500).json({ message: 'Internal Server Error' });\r\n});\r\n\r\n// Start server\r\nserver.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});"],"file":"server.dev.js"}