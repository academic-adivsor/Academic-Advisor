{"version":3,"sources":["chatRouter.js"],"names":["express","require","chatRouter","Router","serviceAccount","generateSessionId","toString","req","userMessage","sessionId","botResponse","regeneratorRuntime","async","_context","prev","next","body","message","abrupt","post","status","json","res","awrap","processUserMessage","sent","t0","console","error","stop","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,WAAaF,QAAQG,kBADJF,QAAvB,4BAAMD,4BAAAA,mBAGAI,eAAiBH,QAAQ,uCAGzBI,kBAJiC,WACvC,OAAMD,KAAAA,MAAcE,YAGpBJ,WAAMG,KAAAA,IAAiB,SAAGE,EAApBF,GAAiB,IAAAG,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACrBP,EAAAD,EAAAS,KAAAC,QADqBJ,EAAAC,KAAA,EAWdN,EAXc,CAAAK,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAMZC,EAAKC,OAAK,KAAAC,KAAA,CAAAJ,QAAYK,kCANV,KAAA,EAAA,OAMFb,EAAAJ,oBANEQ,EAAAE,KAAA,EAAAJ,mBAAAY,MAMFC,mBAAAhB,EAAAC,EAAAL,iBANE,KAAA,EAMFM,EANEG,EAAAY,KAMFH,EAAAD,KAAA,CAKZb,QAAAA,IAXcK,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,MAAA,GAMFc,QAAAC,MAAA,SAAAf,EAAAa,IAAAJ,EAAAF,OAAA,KAAAC,KAAA,CAAAJ,QAAA,0BANE,KAAA,GAAA,IAAA,MAAA,OAAAJ,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAYWC,OAAAC,QANb7B","file":"chatRouter.min.js","sourcesContent":["const express = require(\"express\");\r\nconst chatRouter = express.Router();\r\nconst { processUserMessage } = require(\"../utlis/dialogFlowUtils\");\r\nconst serviceAccount = require('../../parker-pslk-7df273a4b799.json');\r\n\r\n// Function to generate a session ID\r\nconst generateSessionId = () => {\r\n  // Generate a unique session ID using a library or any method of your choice\r\n  // For simplicity, you can use a timestamp or a random string\r\n  return Date.now().toString();\r\n};\r\n\r\nchatRouter.post(\"/\", async (req, res) => {\r\n  const userMessage = req.body.message;\r\n\r\n  try {\r\n    // Ensure that a message is provided\r\n    if (!userMessage) {\r\n      return res.status(400).json({ message: 'Bad Request: Missing message' });\r\n    }\r\n\r\n    // Generate a session ID\r\n    const sessionId = generateSessionId();\r\n\r\n    // Process user message with the generated session ID\r\n    const botResponse = await processUserMessage(userMessage, sessionId, serviceAccount);\r\n\r\n    res.json({ message: botResponse });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\nmodule.exports = chatRouter;"]}