{"version":3,"sources":["chatRouter.js"],"names":["express","require","chatRouter","Router","processUserMessage","serviceAccount","generateSessionId","Date","now","toString","post","req","res","userMessage","body","message","status","json","sessionId","botResponse","console","error","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGF,OAAO,CAACG,MAAR,EAAnB;;eAC+BF,OAAO,CAAC,6BAAD,C;IAA9BG,kB,YAAAA,kB;;AACR,IAAMC,cAAc,GAAGJ,OAAO,CAAC,wCAAD,CAA9B,C,CAEA;;;AACA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B;AACA;AACA,SAAOC,IAAI,CAACC,GAAL,GAAWC,QAAX,EAAP;AACD,CAJD;;AAMAP,UAAU,CAACQ,IAAX,CAAgB,GAAhB,EAAqB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,WADa,GACCF,GAAG,CAACG,IAAJ,CAASC,OADV;AAAA;;AAAA,cAKZF,WALY;AAAA;AAAA;AAAA;;AAAA,2CAMRD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAArB,CANQ;;AAAA;AASjB;AACMG,UAAAA,SAVW,GAUCZ,iBAAiB,EAVlB,EAYjB;;AAZiB;AAAA,0CAaSF,kBAAkB,CAACS,WAAD,EAAcK,SAAd,EAAyBb,cAAzB,CAb3B;;AAAA;AAaXc,UAAAA,WAbW;AAejBP,UAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEF,YAAAA,OAAO,EAAEI;AAAX,WAAT;AAfiB;AAAA;;AAAA;AAAA;AAAA;AAiBjBC,UAAAA,OAAO,CAACC,KAAR,CAAc,QAAd;AACAT,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAlBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAsBAO,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["const express = require(\"express\");\r\nconst chatRouter = express.Router();\r\nconst { processUserMessage } = require(\"../../utlis/dialogFlowUtils\");\r\nconst serviceAccount = require('../../../parker-pslk-7df273a4b799.json');\r\n\r\n// Function to generate a session ID\r\nconst generateSessionId = () => {\r\n  // Generate a unique session ID using a library or any method of your choice\r\n  // For simplicity, you can use a timestamp or a random string\r\n  return Date.now().toString();\r\n};\r\n\r\nchatRouter.post(\"/\", async (req, res) => {\r\n  const userMessage = req.body.message;\r\n\r\n  try {\r\n    // Ensure that a message is provided\r\n    if (!userMessage) {\r\n      return res.status(400).json({ message: 'Bad Request: Missing message' });\r\n    }\r\n\r\n    // Generate a session ID\r\n    const sessionId = generateSessionId();\r\n\r\n    // Process user message with the generated session ID\r\n    const botResponse = await processUserMessage(userMessage, sessionId, serviceAccount);\r\n\r\n    res.json({ message: botResponse });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    res.status(500).json({ message: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\nmodule.exports = chatRouter;"],"file":"chatRouter.dev.js"}